{
  "$product": {
    "deployment_mode": "SOLO",
    "name": "API AutoFlow",
    "version": "2.1.16"
  },
  "DataGroup": [
    {
      "id": "3c55c089-b4bd-4d22-a6ce-af9e804df952"
    },
    {
      "id": "5ff7c0c2-4020-48a4-94ed-273fa307f27c"
    }
  ],
  "Flow": [
    {
      "flow": [
        {
          "$action": "database/postgres/query",
          "address": "127.0.0.1",
          "database": "transportation",
          "format": "processed",
          "mock-result": {
            "columns": [
              "column1",
              "column2"
            ],
            "num_rows": 2,
            "rows": [
              [
                "col1_val1",
                "col2_val1"
              ],
              [
                "col1_val2",
                "col2_val2"
              ]
            ]
          },
          "output-location": {
            "__LDATA__": [
              "bus_situation"
            ]
          },
          "password": "navid1234",
          "port": 5432,
          "query": "SELECT id,bus_id, lat, long, situation, last_visited_station FROM public.\"bus_position\" WHERE bus_id = '1' ORDER BY id DESC LIMIT 1",
          "use-mock-result": false,
          "username": "postgres"
        },
        {
          "$action": "conditional/if",
          "else": [
            {
              "$action": "string/slice",
              "length": 8,
              "name": "String Slice",
              "output-location": {
                "__LDATA__": [
                  "waiting"
                ]
              },
              "start": 8,
              "string": {
                "__LDATA__": [
                  "bus_situation",
                  0,
                  "situation"
                ]
              }
            },
            {
              "$action": "string/to-integer",
              "name": "String To Interger",
              "output-location": {
                "__LDATA__": [
                  "waiting"
                ]
              },
              "string": {
                "__LDATA__": [
                  "waiting"
                ]
              }
            },
            {
              "$action": "conditional/if",
              "else": [
                {
                  "$action": "data/expression",
                  "expression": "var1 + 1",
                  "name": "increase one min",
                  "output-location": {
                    "__LDATA__": [
                      "waiting"
                    ]
                  },
                  "variables": [
                    {
                      "name": "var1",
                      "target": {
                        "__LDATA__": [
                          "waiting"
                        ]
                      }
                    }
                  ]
                },
                {
                  "$action": "string/join",
                  "array": [
                    "UPDATE public.\"bus_position\" SET situation = 'waiting ",
                    {
                      "__LDATA__": [
                        "waiting"
                      ]
                    },
                    "' WHERE id = '",
                    {
                      "__LDATA__": [
                        "bus_situation",
                        0,
                        "id"
                      ]
                    },
                    "'"
                  ],
                  "name": "prepare query",
                  "output-location": {
                    "__LDATA__": [
                      "query-to-update-waiting"
                    ]
                  },
                  "separator": ""
                },
                {
                  "$action": "database/postgres/query",
                  "address": "127.0.0.1",
                  "database": "transportation",
                  "format": "processed",
                  "mock-result": {
                    "columns": [
                      "column1",
                      "column2"
                    ],
                    "num_rows": 2,
                    "rows": [
                      [
                        "col1_val1",
                        "col2_val1"
                      ],
                      [
                        "col1_val2",
                        "col2_val2"
                      ]
                    ]
                  },
                  "output-location": {
                    "__LDATA__": [
                      "result"
                    ]
                  },
                  "password": "navid1234",
                  "port": 5432,
                  "query": {
                    "__LDATA__": [
                      "query-to-update-waiting"
                    ]
                  },
                  "use-mock-result": false,
                  "username": "postgres"
                }
              ],
              "expression": "",
              "name": "if waiting == 20 min",
              "then": [
                {
                  "$action": "datetime/now",
                  "output-location": {
                    "__LDATA__": [
                      "time"
                    ]
                  },
                  "time-unit": "second"
                },
                {
                  "$action": "string/slice",
                  "length": 19,
                  "output-location": {
                    "__LDATA__": [
                      "time"
                    ]
                  },
                  "start": 0,
                  "string": {
                    "__LDATA__": [
                      "time"
                    ]
                  }
                },
                {
                  "$action": "string/join",
                  "array": [
                    "INSERT INTO public.\"bus_position\" (\"bus_id\",\"lat\",\"long\",\"situation\",\"time\",\"last_visited_station\") VALUES ('",
                    {
                      "__LDATA__": [
                        "bus_situation",
                        0,
                        "bus_id"
                      ]
                    },
                    "','",
                    {
                      "__LDATA__": [
                        "bus_situation",
                        0,
                        "lat"
                      ]
                    },
                    "','",
                    {
                      "__LDATA__": [
                        "bus_situation",
                        0,
                        "long"
                      ]
                    },
                    "','moving','",
                    {
                      "__LDATA__": [
                        "time"
                      ]
                    },
                    "','1')"
                  ],
                  "output-location": {
                    "__LDATA__": [
                      "query-to-update-moving"
                    ]
                  },
                  "separator": ""
                },
                {
                  "$action": "database/postgres/query",
                  "address": "127.0.0.1",
                  "database": "transportation",
                  "format": "processed",
                  "mock-result": {
                    "columns": [
                      "column1",
                      "column2"
                    ],
                    "num_rows": 2,
                    "rows": [
                      [
                        "col1_val1",
                        "col2_val1"
                      ],
                      [
                        "col1_val2",
                        "col2_val2"
                      ]
                    ]
                  },
                  "output-location": {
                    "__LDATA__": [
                      "result"
                    ]
                  },
                  "password": "navid1234",
                  "port": 5432,
                  "query": {
                    "__LDATA__": [
                      "query-to-update-moving"
                    ]
                  },
                  "use-mock-result": false,
                  "username": "postgres"
                },
                {
                  "$action": "communication/http-request",
                  "body": "{\"text\":\"bus starts a new trip from station 1\"}",
                  "header": {
                    "Content-type": "application/json"
                  },
                  "method": "POST",
                  "mock-result": {
                    "body": "",
                    "header": {},
                    "status-code": 200
                  },
                  "output-location": {
                    "__LDATA__": [
                      "response",
                      "body"
                    ]
                  },
                  "query": {},
                  "timeout": 5000,
                  "url": "#######COMENT########        https://hooks.slack.com/services/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",
                  "url-variables": {},
                  "use-mock-result": false
                }
              ],
              "variables": [
                {
                  "$condition": "number/is-equal",
                  "name": "condition1",
                  "target": {
                    "__LDATA__": [
                      "waiting"
                    ]
                  },
                  "value": 20
                }
              ]
            }
          ],
          "expression": "",
          "name": "if situation == moving",
          "then": [
            {
              "$action": "organization/group",
              "do": [
                {
                  "$action": "communication/http-request",
                  "body": "",
                  "header": {},
                  "method": "GET",
                  "mock-result": {
                    "body": "",
                    "header": {},
                    "status-code": 200
                  },
                  "output-location": {
                    "__$afref__": "data",
                    "path": [
                      "raw_data_raw"
                    ]
                  },
                  "query": {},
                  "timeout": 5000,
                  "url": "http://localhost:1001/simulate-position",
                  "url-variables": {},
                  "use-mock-result": false
                },
                {
                  "$action": "flow/call",
                  "flow-id": "de06a5a1-2dfc-44a9-9e08-ec8e9f32013a",
                  "input": {
                    "__$afref__": "data",
                    "path": [
                      "raw_data_raw",
                      "body"
                    ]
                  },
                  "name": "rounding lat long",
                  "output-location": {
                    "__LDATA__": [
                      "raw_data"
                    ]
                  }
                },
                {
                  "$action": "json/decode",
                  "json": {
                    "__$afref__": "data",
                    "path": [
                      "raw_data_raw",
                      "body"
                    ]
                  },
                  "output-location": {
                    "__$afref__": "data",
                    "path": [
                      "raw_data_raw"
                    ]
                  }
                },
                {
                  "$action": "json/decode",
                  "json": {
                    "__LDATA__": [
                      "raw_data"
                    ]
                  },
                  "output-location": {
                    "__LDATA__": [
                      "lat_long"
                    ]
                  }
                },
                {
                  "$action": "data/set",
                  "at-location": {
                    "__LDATA__": [
                      "in-station"
                    ]
                  },
                  "name": "prepare in station",
                  "value": {
                    "station-name": "no"
                  }
                },
                {
                  "$action": "data/set",
                  "at-location": {
                    "__LDATA__": [
                      "change-situation"
                    ]
                  },
                  "name": "prepare change situation",
                  "value": 0
                },
                {
                  "$action": "table/get-data",
                  "default": "",
                  "key": "bus_1",
                  "mock-result": "",
                  "output-location": {
                    "__LDATA__": [
                      "bus-route"
                    ]
                  },
                  "path": [],
                  "refresh-lifespan": false,
                  "table-id": "3c55c089-b4bd-4d22-a6ce-af9e804df952",
                  "use-mock-result": false
                }
              ],
              "name": "prepare data"
            },
            {
              "$action": "iteration/for-each",
              "array": {
                "__LDATA__": [
                  "bus-route"
                ]
              },
              "do": [
                {
                  "$action": "conditional/if",
                  "else": [],
                  "expression": "condition1 && condition2 && condition3 && condition4",
                  "then": [
                    {
                      "$action": "data/set",
                      "at-location": {
                        "__LDATA__": [
                          "in-station"
                        ]
                      },
                      "value": {
                        "sequence": {
                          "__LDATA__": [
                            "value",
                            "sequence"
                          ]
                        },
                        "station-name": {
                          "__LDATA__": [
                            "value",
                            "station_name"
                          ]
                        },
                        "station_id": {
                          "__LDATA__": [
                            "value",
                            "station_id"
                          ]
                        }
                      }
                    }
                  ],
                  "variables": [
                    {
                      "$condition": "number/is-less",
                      "name": "condition1",
                      "target": {
                        "__LDATA__": [
                          "value",
                          "lat"
                        ]
                      },
                      "value": {
                        "__LDATA__": [
                          "lat_long",
                          "lat_max"
                        ]
                      }
                    },
                    {
                      "$condition": "number/is-greater",
                      "name": "condition2",
                      "target": {
                        "__LDATA__": [
                          "value",
                          "lat"
                        ]
                      },
                      "value": {
                        "__LDATA__": [
                          "lat_long",
                          "lat_min"
                        ]
                      }
                    },
                    {
                      "$condition": "number/is-less",
                      "name": "condition3",
                      "target": {
                        "__LDATA__": [
                          "value",
                          "long"
                        ]
                      },
                      "value": {
                        "__LDATA__": [
                          "lat_long",
                          "lomg_max"
                        ]
                      }
                    },
                    {
                      "$condition": "number/is-greater",
                      "name": "condition4",
                      "target": {
                        "__LDATA__": [
                          "value",
                          "long"
                        ]
                      },
                      "value": {
                        "__LDATA__": [
                          "lat_long",
                          "long_min"
                        ]
                      }
                    }
                  ]
                }
              ],
              "index-location": {
                "__LDATA__": [
                  "index"
                ]
              },
              "name": "iteration for bus in station",
              "value-location": {
                "__LDATA__": [
                  "value"
                ]
              }
            },
            {
              "$action": "conditional/if",
              "else": [
                {
                  "$action": "organization/group",
                  "do": [
                    {
                      "$action": "conditional/if",
                      "else": [],
                      "expression": "",
                      "name": "if string",
                      "then": [
                        {
                          "$action": "string/to-integer",
                          "name": "make integer",
                          "output-location": {
                            "__LDATA__": [
                              "bus_situation",
                              0,
                              "last_visited_station"
                            ]
                          },
                          "string": {
                            "__LDATA__": [
                              "bus_situation",
                              0,
                              "last_visited_station"
                            ]
                          }
                        }
                      ],
                      "variables": [
                        {
                          "$condition": "type/is-string",
                          "name": "condition1",
                          "target": {
                            "__LDATA__": [
                              "bus_situation",
                              0,
                              "last_visited_station"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "$action": "array/count",
                      "array": {
                        "__LDATA__": [
                          "bus-route"
                        ]
                      },
                      "name": "count route",
                      "output-location": {
                        "__LDATA__": [
                          "count-route"
                        ]
                      }
                    },
                    {
                      "$action": "data/expression",
                      "expression": "var1 - 1",
                      "name": "decrease count route",
                      "output-location": {
                        "__LDATA__": [
                          "count-route"
                        ]
                      },
                      "variables": [
                        {
                          "name": "var1",
                          "target": {
                            "__LDATA__": [
                              "count-route"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "$action": "array/at",
                      "array": {
                        "__LDATA__": [
                          "bus-route"
                        ]
                      },
                      "at": {
                        "__LDATA__": [
                          "count-route"
                        ]
                      },
                      "name": "get last in sequence",
                      "output-location": {
                        "__LDATA__": [
                          "last-station"
                        ]
                      }
                    },
                    {
                      "$action": "array/at",
                      "array": {
                        "__LDATA__": [
                          "bus-route"
                        ]
                      },
                      "at": {
                        "__LDATA__": [
                          "in-station",
                          "sequence"
                        ]
                      },
                      "name": "get next in sequence",
                      "output-location": {
                        "__LDATA__": [
                          "next-station"
                        ]
                      }
                    },
                    {
                      "$action": "string/unescape",
                      "output-location": {
                        "__LDATA__": [
                          "new-line"
                        ]
                      },
                      "string": "\\n"
                    },
                    {
                      "$action": "data/set",
                      "at-location": {
                        "__LDATA__": [
                          "new-last-station"
                        ]
                      },
                      "name": "prepare new last station",
                      "value": {
                        "__LDATA__": [
                          "in-station",
                          "station_id"
                        ]
                      }
                    }
                  ],
                  "name": "prepare data"
                },
                {
                  "$action": "conditional/if",
                  "else": [
                    {
                      "$action": "string/join",
                      "array": [
                        "The bus 1 is in station  :   \"",
                        {
                          "__LDATA__": [
                            "in-station",
                            "station-name"
                          ]
                        },
                        {
                          "__LDATA__": [
                            "new-line"
                          ]
                        },
                        "and the next station is : ",
                        {
                          "__LDATA__": [
                            "next-station",
                            "station_name"
                          ]
                        }
                      ],
                      "output-location": {
                        "__LDATA__": [
                          "result"
                        ]
                      },
                      "separator": ""
                    }
                  ],
                  "expression": "",
                  "name": "is going to waiting",
                  "then": [
                    {
                      "$action": "data/set",
                      "at-location": {
                        "__LDATA__": [
                          "change-situation"
                        ]
                      },
                      "name": "change situation",
                      "value": 1
                    },
                    {
                      "$action": "string/join",
                      "array": [
                        "The bus 1 is in first station , named  :   \"",
                        {
                          "__LDATA__": [
                            "in-station",
                            "station-name"
                          ]
                        },
                        {
                          "__LDATA__": [
                            "new-line"
                          ]
                        },
                        "and the next station is : ",
                        {
                          "__LDATA__": [
                            "next-station",
                            "station_name"
                          ]
                        },
                        {
                          "__$afref__": "data",
                          "path": [
                            "new-line"
                          ]
                        },
                        "but will waiting here for 20 minutes"
                      ],
                      "output-location": {
                        "__LDATA__": [
                          "result"
                        ]
                      },
                      "separator": ""
                    }
                  ],
                  "variables": [
                    {
                      "$condition": "number/is-equal",
                      "name": "condition1",
                      "target": {
                        "__LDATA__": [
                          "in-station",
                          "sequence"
                        ]
                      },
                      "value": 1
                    },
                    {
                      "$condition": "number/is-equal",
                      "name": "condition2",
                      "target": {
                        "__LDATA__": [
                          "bus_situation",
                          0,
                          "last_visited_station"
                        ]
                      },
                      "value": {
                        "__LDATA__": [
                          "last-station",
                          "station_id"
                        ]
                      }
                    }
                  ]
                }
              ],
              "expression": "",
              "name": "in station == no",
              "then": [
                {
                  "$action": "data/set",
                  "at-location": {
                    "__LDATA__": [
                      "result"
                    ]
                  },
                  "value": "The bus 1 is not in a station"
                },
                {
                  "$action": "data/set",
                  "at-location": {
                    "__LDATA__": [
                      "new-last-station"
                    ]
                  },
                  "name": "prepare new last station",
                  "value": {
                    "__LDATA__": [
                      "bus_situation",
                      0,
                      "last_visited_station"
                    ]
                  }
                }
              ],
              "variables": [
                {
                  "$condition": "string/is-equivalent",
                  "name": "condition1",
                  "target": {
                    "__LDATA__": [
                      "in-station",
                      "station-name"
                    ]
                  },
                  "value": "no"
                }
              ]
            },
            {
              "$action": "organization/group",
              "do": [
                {
                  "$action": "datetime/now",
                  "output-location": {
                    "__LDATA__": [
                      "time"
                    ]
                  },
                  "time-unit": "second"
                },
                {
                  "$action": "string/slice",
                  "length": 19,
                  "output-location": {
                    "__LDATA__": [
                      "time"
                    ]
                  },
                  "start": 0,
                  "string": {
                    "__LDATA__": [
                      "time"
                    ]
                  }
                },
                {
                  "$action": "conditional/if",
                  "else": [
                    {
                      "$action": "json/encode",
                      "data": {
                        "bus_id": 1,
                        "last_visited_station": {
                          "__LDATA__": [
                            "new-last-station"
                          ]
                        },
                        "lat": {
                          "__LDATA__": [
                            "raw_data_raw",
                            "lat"
                          ]
                        },
                        "long": {
                          "__LDATA__": [
                            "raw_data_raw",
                            "long"
                          ]
                        },
                        "situation": "waiting 0",
                        "time": {
                          "__LDATA__": [
                            "time"
                          ]
                        }
                      },
                      "name": "json/encode",
                      "output-location": {
                        "__LDATA__": [
                          "data"
                        ]
                      }
                    }
                  ],
                  "expression": "",
                  "name": "situation should not change",
                  "then": [
                    {
                      "$action": "json/encode",
                      "data": {
                        "bus_id": 1,
                        "last_visited_station": {
                          "__LDATA__": [
                            "new-last-station"
                          ]
                        },
                        "lat": {
                          "__$afref__": "data",
                          "path": [
                            "raw_data_raw",
                            "lat"
                          ]
                        },
                        "long": {
                          "__$afref__": "data",
                          "path": [
                            "raw_data_raw",
                            "long"
                          ]
                        },
                        "situation": "moving",
                        "time": {
                          "__LDATA__": [
                            "time"
                          ]
                        }
                      },
                      "name": "json/encode",
                      "output-location": {
                        "__LDATA__": [
                          "data"
                        ]
                      }
                    }
                  ],
                  "variables": [
                    {
                      "$condition": "number/is-equal",
                      "name": "condition1",
                      "target": {
                        "__LDATA__": [
                          "change-situation"
                        ]
                      },
                      "value": 0
                    }
                  ]
                }
              ],
              "name": "prepare data"
            },
            {
              "$action": "communication/http-request",
              "body": {
                "__LDATA__": [
                  "data"
                ]
              },
              "header": {},
              "method": "POST",
              "mock-result": {
                "body": "",
                "header": {},
                "status-code": 200
              },
              "output-location": {
                "__LDATA__": [
                  "result"
                ]
              },
              "query": {},
              "timeout": 5000,
              "url": "http://localhost:1001/insert-bus-position",
              "url-variables": {},
              "use-mock-result": false
            }
          ],
          "variables": [
            {
              "$condition": "string/is-equivalent",
              "name": "condition1",
              "target": {
                "__LDATA__": [
                  "bus_situation",
                  0,
                  "situation"
                ]
              },
              "value": "moving"
            }
          ]
        }
      ],
      "id": "6963438f-24d9-402c-8ea0-7c4db5ac072f"
    },
    {
      "default-test": "d11874de-0843-4f27-9c9b-7e00e6aa03dd",
      "flow": [
        {
          "$action": "database/postgres/query",
          "address": "127.0.0.1",
          "database": "transportation",
          "format": "processed",
          "mock-result": {
            "columns": [
              "column1",
              "column2"
            ],
            "num_rows": 2,
            "rows": [
              [
                "col1_val1",
                "col2_val1"
              ],
              [
                "col1_val2",
                "col2_val2"
              ]
            ]
          },
          "output-location": {
            "__LDATA__": [
              "response",
              "body"
            ]
          },
          "password": "navid1234",
          "port": 5432,
          "query": "SELECT * FROM public.\"buses\"",
          "use-mock-result": false,
          "username": "postgres"
        },
        {
          "$action": "config/get-timer",
          "mock-result": {
            "interval": 5000,
            "name": "timer-name"
          },
          "output-location": {
            "__$afref__": "data",
            "path": [
              "update"
            ]
          },
          "timer-id": "f1490449-adb2-4a23-a3d0-597be4159173",
          "use-mock-result": false
        }
      ],
      "id": "11efd1b8-f0b3-4d80-b45b-80d160e26b31"
    },
    {
      "default-test": "e10f572e-4cb0-44e2-b21b-5426bb974d48",
      "flow": [
        {
          "$action": "flow/call",
          "flow-id": "543a32ec-cb17-48e1-ba22-863d33763a7f",
          "input": {
            "data": {
              "__LDATA__": [
                "request",
                "body"
              ]
            },
            "what": "bus_position"
          },
          "name": "insert to db",
          "output-location": {
            "__LDATA__": []
          }
        }
      ],
      "id": "4cf5ae01-8ee7-4333-8845-07ca8d1c8a15"
    },
    {
      "default-test": "d757ecdb-e74a-4ec0-972b-516b2f4c231a",
      "flow": [
        {
          "$action": "flow/call",
          "flow-id": "543a32ec-cb17-48e1-ba22-863d33763a7f",
          "input": {
            "data": {
              "__LDATA__": [
                "request",
                "body"
              ]
            },
            "what": "station"
          },
          "name": "insert to db",
          "output-location": {
            "__LDATA__": []
          }
        }
      ],
      "id": "03f038e9-5981-4fa7-b83a-e8f46e21e70b"
    },
    {
      "default-test": "930c841f-02dd-48de-ab5b-1c188bbfe4fa",
      "flow": [
        {
          "$action": "json/decode",
          "json": {
            "__$afref__": "data",
            "path": [
              "request",
              "body"
            ]
          },
          "output-location": {
            "__$afref__": "data",
            "path": [
              "request",
              "body"
            ]
          }
        },
        {
          "$action": "conditional/if",
          "else": [
            {
              "$action": "config/stop-timer",
              "timer-id": "f1490449-adb2-4a23-a3d0-597be4159173",
              "use-mock-result": false
            }
          ],
          "expression": "",
          "name": "update bus position",
          "then": [
            {
              "$action": "config/start-timer",
              "timer-id": "f1490449-adb2-4a23-a3d0-597be4159173",
              "use-mock-result": false
            }
          ],
          "variables": [
            {
              "$condition": "string/is-equivalent",
              "name": "condition1",
              "target": {
                "__$afref__": "data",
                "path": [
                  "request",
                  "body",
                  "update"
                ]
              },
              "value": "on"
            }
          ]
        },
        {
          "$action": "conditional/if",
          "else": [
            {
              "$action": "config/stop-timer",
              "timer-id": "ede59e76-7cf7-4e00-9a77-f537ce3f44ed",
              "use-mock-result": false
            }
          ],
          "expression": "",
          "name": "check bus situation",
          "then": [
            {
              "$action": "config/start-timer",
              "timer-id": "ede59e76-7cf7-4e00-9a77-f537ce3f44ed",
              "use-mock-result": false
            }
          ],
          "variables": [
            {
              "$condition": "string/is-equivalent",
              "name": "condition1",
              "target": {
                "__$afref__": "data",
                "path": [
                  "request",
                  "body",
                  "check"
                ]
              },
              "value": "on"
            }
          ]
        },
        {
          "$action": "conditional/if",
          "else": [
            {
              "$action": "config/stop-timer",
              "timer-id": "be0d9484-5f61-40f4-befb-8563c15bd9fd",
              "use-mock-result": false
            }
          ],
          "expression": "",
          "name": "clean bus position table",
          "then": [
            {
              "$action": "config/start-timer",
              "timer-id": "be0d9484-5f61-40f4-befb-8563c15bd9fd",
              "use-mock-result": false
            }
          ],
          "variables": [
            {
              "$condition": "string/is-equivalent",
              "name": "condition1",
              "target": {
                "__$afref__": "data",
                "path": [
                  "request",
                  "body",
                  "clean"
                ]
              },
              "value": "on"
            }
          ]
        }
      ],
      "id": "73ce7639-a277-47e0-908e-442f3e0027cf"
    },
    {
      "default-test": "e2dbe48a-7479-4dbe-8dc2-34e5dc6f4dd8",
      "flow": [
        {
          "$action": "organization/group",
          "do": [
            {
              "$action": "json/decode",
              "json": {
                "__LDATA__": [
                  "request",
                  "body"
                ]
              },
              "output-location": {
                "__LDATA__": [
                  "bus"
                ]
              }
            },
            {
              "$action": "string/join",
              "array": [
                "SELECT station_id, sequence FROM public.\"bus_station\" WHERE bus_id = '",
                {
                  "__LDATA__": [
                    "bus",
                    "bus_id"
                  ]
                },
                "' ORDER BY sequence DESC"
              ],
              "output-location": {
                "__LDATA__": [
                  "query"
                ]
              },
              "separator": ""
            },
            {
              "$action": "database/postgres/query",
              "address": "127.0.0.1",
              "database": "transportation",
              "format": "processed",
              "mock-result": {
                "columns": [
                  "column1",
                  "column2"
                ],
                "num_rows": 2,
                "rows": [
                  [
                    "col1_val1",
                    "col2_val1"
                  ],
                  [
                    "col1_val2",
                    "col2_val2"
                  ]
                ]
              },
              "output-location": {
                "__LDATA__": [
                  "result"
                ]
              },
              "password": "navid1234",
              "port": 5432,
              "query": {
                "__LDATA__": [
                  "query"
                ]
              },
              "use-mock-result": false,
              "username": "postgres"
            },
            {
              "$action": "data/set",
              "at-location": {
                "__LDATA__": [
                  "correct-result"
                ]
              },
              "value": []
            }
          ],
          "name": "get data"
        },
        {
          "$action": "iteration/for-each",
          "array": {
            "__LDATA__": [
              "result"
            ]
          },
          "do": [
            {
              "$action": "string/join",
              "array": [
                "SELECT station_name, lat, long FROM public.\"stations\" WHERE id = '",
                {
                  "__LDATA__": [
                    "value",
                    "station_id"
                  ]
                },
                "'"
              ],
              "output-location": {
                "__LDATA__": [
                  "query-for-station-name"
                ]
              },
              "separator": ""
            },
            {
              "$action": "database/postgres/query",
              "address": "127.0.0.1",
              "database": "transportation",
              "format": "processed",
              "mock-result": {
                "columns": [
                  "column1",
                  "column2"
                ],
                "num_rows": 2,
                "rows": [
                  [
                    "col1_val1",
                    "col2_val1"
                  ],
                  [
                    "col1_val2",
                    "col2_val2"
                  ]
                ]
              },
              "output-location": {
                "__LDATA__": [
                  "station"
                ]
              },
              "password": "navid1234",
              "port": 5432,
              "query": {
                "__LDATA__": [
                  "query-for-station-name"
                ]
              },
              "use-mock-result": false,
              "username": "postgres"
            },
            {
              "$action": "array/insert-at",
              "array": {
                "__LDATA__": [
                  "correct-result"
                ]
              },
              "index": 0,
              "output-location": {
                "__LDATA__": [
                  "correct-result"
                ]
              },
              "value": {
                "lat": {
                  "__LDATA__": [
                    "station",
                    0,
                    "lat"
                  ]
                },
                "long": {
                  "__LDATA__": [
                    "station",
                    0,
                    "long"
                  ]
                },
                "sequence": {
                  "__LDATA__": [
                    "value",
                    "sequence"
                  ]
                },
                "station_id": {
                  "__LDATA__": [
                    "value",
                    "station_id"
                  ]
                },
                "station_name": {
                  "__LDATA__": [
                    "station",
                    0,
                    "station_name"
                  ]
                }
              }
            }
          ],
          "index-location": {
            "__LDATA__": [
              "index"
            ]
          },
          "name": "iteration for geting the route",
          "value-location": {
            "__LDATA__": [
              "value"
            ]
          }
        },
        {
          "$action": "string/join",
          "array": [
            "bus_",
            {
              "__$afref__": "data",
              "path": [
                "bus",
                "bus_id"
              ]
            }
          ],
          "output-location": {
            "__$afref__": "data",
            "path": [
              "bus"
            ]
          },
          "separator": ""
        },
        {
          "$action": "table/set-data",
          "cache": 0,
          "iterate": false,
          "key": {
            "__$afref__": "data",
            "path": [
              "bus"
            ]
          },
          "lifespan": null,
          "mock-result": "ok",
          "output-location": {
            "__LDATA__": [
              "result"
            ]
          },
          "path": [],
          "table-id": "3c55c089-b4bd-4d22-a6ce-af9e804df952",
          "use-mock-result": false,
          "value": {
            "__LDATA__": [
              "correct-result"
            ]
          }
        },
        {
          "$action": "data/set",
          "at-location": {
            "__LDATA__": [
              "response",
              "body"
            ]
          },
          "value": {
            "__LDATA__": [
              "correct-result"
            ]
          }
        }
      ],
      "id": "7332525c-145f-411d-8475-c7bb2d51d571"
    },
    {
      "default-test": "f911cce2-e08e-4a9c-a583-f095526b2ae2",
      "flow": [
        {
          "$action": "conditional/if",
          "else": [],
          "expression": "",
          "name": "reset datat in simulation tabal",
          "then": [
            {
              "$action": "data/set",
              "at-location": {
                "__$afref__": "data",
                "path": [
                  "lat_long"
                ]
              },
              "value": "40.785,-73.969;40.779,-73.984;40.760,-73.998;40.758,-73.977;40.766,-73.969;40.762,-73.956;40.772,-73.950;40.776,-73.933;40.789,-73.939;40.801,-73.932;40.814,-73.935;40.825,-73.935;40.82,-73.956;40.807,-73.966;40.792,-73.964;40.785,-73.969"
            },
            {
              "$action": "string/split-with",
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "lat_long"
                ]
              },
              "parts": 0,
              "pattern": ";",
              "string": {
                "__$afref__": "data",
                "path": [
                  "lat_long"
                ]
              },
              "trim": false
            },
            {
              "$action": "data/set",
              "at-location": {
                "__$afref__": "data",
                "path": [
                  "iteration"
                ]
              },
              "value": 0
            },
            {
              "$action": "table/set-data",
              "cache": 0,
              "iterate": false,
              "key": "iteration",
              "lifespan": null,
              "mock-result": "ok",
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "result"
                ]
              },
              "path": [],
              "table-id": "5ff7c0c2-4020-48a4-94ed-273fa307f27c",
              "use-mock-result": false,
              "value": {
                "__$afref__": "data",
                "path": [
                  "iteration"
                ]
              }
            },
            {
              "$action": "table/set-data",
              "cache": 0,
              "iterate": false,
              "key": "lat_long",
              "lifespan": null,
              "mock-result": "ok",
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "result"
                ]
              },
              "path": [],
              "table-id": "5ff7c0c2-4020-48a4-94ed-273fa307f27c",
              "use-mock-result": false,
              "value": {
                "__$afref__": "data",
                "path": [
                  "lat_long"
                ]
              }
            }
          ],
          "variables": [
            {
              "$condition": "string/is-equivalent",
              "name": "condition1",
              "target": {
                "__$afref__": "data",
                "path": [
                  "request",
                  "body"
                ]
              },
              "value": "reset"
            }
          ]
        },
        {
          "$action": "organization/group",
          "do": [
            {
              "$action": "table/get-data",
              "default": "",
              "key": "iteration",
              "mock-result": "",
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "iteration"
                ]
              },
              "path": [],
              "refresh-lifespan": false,
              "table-id": "5ff7c0c2-4020-48a4-94ed-273fa307f27c",
              "use-mock-result": false
            },
            {
              "$action": "table/get-data",
              "default": "",
              "key": "lat_long",
              "mock-result": "",
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "lat_long"
                ]
              },
              "path": [],
              "refresh-lifespan": false,
              "table-id": "5ff7c0c2-4020-48a4-94ed-273fa307f27c",
              "use-mock-result": false
            },
            {
              "$action": "array/count",
              "array": {
                "__$afref__": "data",
                "path": [
                  "lat_long"
                ]
              },
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "lat_long_count"
                ]
              }
            },
            {
              "$action": "conditional/if",
              "else": [],
              "expression": "",
              "name": "if iteration is full",
              "then": [
                {
                  "$action": "data/set",
                  "at-location": {
                    "__$afref__": "data",
                    "path": [
                      "iteration"
                    ]
                  },
                  "value": 0
                },
                {
                  "$action": "table/set-data",
                  "cache": 0,
                  "iterate": false,
                  "key": "iteration",
                  "lifespan": null,
                  "mock-result": "ok",
                  "output-location": {
                    "__$afref__": "data",
                    "path": [
                      "result"
                    ]
                  },
                  "path": [],
                  "table-id": "5ff7c0c2-4020-48a4-94ed-273fa307f27c",
                  "use-mock-result": false,
                  "value": {
                    "__$afref__": "data",
                    "path": [
                      "iteration"
                    ]
                  }
                }
              ],
              "variables": [
                {
                  "$condition": "number/is-greater-or-equal",
                  "name": "condition1",
                  "target": {
                    "__$afref__": "data",
                    "path": [
                      "iteration"
                    ]
                  },
                  "value": {
                    "__$afref__": "data",
                    "path": [
                      "lat_long_count"
                    ]
                  }
                }
              ]
            }
          ],
          "name": "prepare data"
        },
        {
          "$action": "organization/group",
          "do": [
            {
              "$action": "array/at",
              "array": {
                "__$afref__": "data",
                "path": [
                  "lat_long"
                ]
              },
              "at": {
                "__$afref__": "data",
                "path": [
                  "iteration"
                ]
              },
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "lat_long"
                ]
              }
            },
            {
              "$action": "string/split-with",
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "lat_long"
                ]
              },
              "parts": 0,
              "pattern": ",",
              "string": {
                "__$afref__": "data",
                "path": [
                  "lat_long"
                ]
              },
              "trim": true
            },
            {
              "$action": "string/join",
              "array": [
                "{\"lat\":\"",
                {
                  "__$afref__": "data",
                  "path": [
                    "lat_long",
                    0
                  ]
                },
                "\",\"long\":\"",
                {
                  "__$afref__": "data",
                  "path": [
                    "lat_long",
                    1
                  ]
                },
                "\"}"
              ],
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "response",
                  "body"
                ]
              },
              "separator": ""
            },
            {
              "$action": "data/expression",
              "expression": "var1 + 1",
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "iteration"
                ]
              },
              "variables": [
                {
                  "name": "var1",
                  "target": {
                    "__$afref__": "data",
                    "path": [
                      "iteration"
                    ]
                  }
                }
              ]
            },
            {
              "$action": "table/set-data",
              "cache": 0,
              "iterate": false,
              "key": "iteration",
              "lifespan": null,
              "mock-result": "ok",
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "result"
                ]
              },
              "path": [],
              "table-id": "5ff7c0c2-4020-48a4-94ed-273fa307f27c",
              "use-mock-result": false,
              "value": {
                "__$afref__": "data",
                "path": [
                  "iteration"
                ]
              }
            }
          ],
          "name": "give result"
        }
      ],
      "id": "2b898600-62a9-48a4-b06d-0dff741f4cb8"
    },
    {
      "default-test": "11531c17-809a-43f8-b9fe-21a166bae674",
      "flow": [
        {
          "$action": "organization/group",
          "do": [
            {
              "$action": "json/decode",
              "json": {
                "__$afref__": "data",
                "path": [
                  "request",
                  "body"
                ]
              },
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "request",
                  "body"
                ]
              }
            },
            {
              "$action": "string/join",
              "array": [
                "SELECT * FROM public.\"bus_station\" WHERE bus_id = '",
                {
                  "__$afref__": "data",
                  "path": [
                    "request",
                    "body",
                    "bus_id"
                  ]
                },
                "'"
              ],
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "bus_route_query"
                ]
              },
              "separator": ""
            },
            {
              "$action": "database/postgres/query",
              "address": "127.0.0.1",
              "database": "transportation",
              "format": "processed",
              "mock-result": {
                "columns": [
                  "column1",
                  "column2"
                ],
                "num_rows": 2,
                "rows": [
                  [
                    "col1_val1",
                    "col2_val1"
                  ],
                  [
                    "col1_val2",
                    "col2_val2"
                  ]
                ]
              },
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "bus_route_query"
                ]
              },
              "password": "navid1234",
              "port": 5432,
              "query": {
                "__$afref__": "data",
                "path": [
                  "bus_route_query"
                ]
              },
              "use-mock-result": false,
              "username": "postgres"
            },
            {
              "$action": "conditional/if",
              "else": [
                {
                  "$action": "string/join",
                  "array": [
                    "DELETE FROM public.\"bus_station\" WHERE bus_id = '",
                    {
                      "__$afref__": "data",
                      "path": [
                        "request",
                        "body",
                        "bus_id"
                      ]
                    },
                    "'"
                  ],
                  "output-location": {
                    "__$afref__": "data",
                    "path": [
                      "bus_route_query"
                    ]
                  },
                  "separator": ""
                },
                {
                  "$action": "database/postgres/query",
                  "address": "127.0.0.1",
                  "database": "transportation",
                  "format": "processed",
                  "mock-result": {
                    "columns": [
                      "column1",
                      "column2"
                    ],
                    "num_rows": 2,
                    "rows": [
                      [
                        "col1_val1",
                        "col2_val1"
                      ],
                      [
                        "col1_val2",
                        "col2_val2"
                      ]
                    ]
                  },
                  "output-location": {
                    "__$afref__": "data",
                    "path": [
                      "bus_route_query"
                    ]
                  },
                  "password": "navid1234",
                  "port": 5432,
                  "query": {
                    "__$afref__": "data",
                    "path": [
                      "bus_route_query"
                    ]
                  },
                  "use-mock-result": false,
                  "username": "postgres"
                }
              ],
              "expression": "",
              "then": [],
              "variables": [
                {
                  "$condition": "array/is-empty",
                  "name": "condition1",
                  "target": {
                    "__$afref__": "data",
                    "path": [
                      "bus_route_query"
                    ]
                  }
                }
              ]
            }
          ],
          "name": "prepare data"
        },
        {
          "$action": "organization/group",
          "do": [
            {
              "$action": "string/length",
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "array_length"
                ]
              },
              "string": {
                "__$afref__": "data",
                "path": [
                  "request",
                  "body",
                  "station_id"
                ]
              }
            },
            {
              "$action": "data/expression",
              "expression": "var1 - 2",
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "array_length"
                ]
              },
              "variables": [
                {
                  "name": "var1",
                  "target": {
                    "__$afref__": "data",
                    "path": [
                      "array_length"
                    ]
                  }
                }
              ]
            },
            {
              "$action": "string/slice",
              "length": {
                "__$afref__": "data",
                "path": [
                  "array_length"
                ]
              },
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "request",
                  "body",
                  "station_id"
                ]
              },
              "start": 1,
              "string": {
                "__$afref__": "data",
                "path": [
                  "request",
                  "body",
                  "station_id"
                ]
              }
            },
            {
              "$action": "string/split-with",
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "request",
                  "body",
                  "station_id"
                ]
              },
              "parts": 0,
              "pattern": ",",
              "string": {
                "__$afref__": "data",
                "path": [
                  "request",
                  "body",
                  "station_id"
                ]
              },
              "trim": false
            }
          ],
          "name": "prepare stations array"
        },
        {
          "$action": "iteration/for-each",
          "array": {
            "__$afref__": "data",
            "path": [
              "request",
              "body",
              "station_id"
            ]
          },
          "do": [
            {
              "$action": "data/expression",
              "expression": "var1 + 1",
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "sequence"
                ]
              },
              "variables": [
                {
                  "name": "var1",
                  "target": {
                    "__$afref__": "data",
                    "path": [
                      "index"
                    ]
                  }
                }
              ]
            },
            {
              "$action": "string/join",
              "array": [
                "INSERT INTO public.\"bus_station\" (\"bus_id\",\"station_id\",\"sequence\") VALUES ('",
                {
                  "__$afref__": "data",
                  "path": [
                    "request",
                    "body",
                    "bus_id"
                  ]
                },
                "','",
                {
                  "__$afref__": "data",
                  "path": [
                    "value"
                  ]
                },
                "','",
                {
                  "__$afref__": "data",
                  "path": [
                    "sequence"
                  ]
                },
                "')"
              ],
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "bus_route_query"
                ]
              },
              "separator": ""
            },
            {
              "$action": "database/postgres/query",
              "address": "127.0.0.1",
              "database": "transportation",
              "format": "processed",
              "mock-result": {
                "columns": [
                  "column1",
                  "column2"
                ],
                "num_rows": 2,
                "rows": [
                  [
                    "col1_val1",
                    "col2_val1"
                  ],
                  [
                    "col1_val2",
                    "col2_val2"
                  ]
                ]
              },
              "output-location": {
                "__$afref__": "data",
                "path": [
                  "bus_route_query"
                ]
              },
              "password": "navid1234",
              "port": 5432,
              "query": {
                "__$afref__": "data",
                "path": [
                  "bus_route_query"
                ]
              },
              "use-mock-result": false,
              "username": "postgres"
            }
          ],
          "index-location": {
            "__$afref__": "data",
            "path": [
              "index"
            ]
          },
          "value-location": {
            "__$afref__": "data",
            "path": [
              "value"
            ]
          }
        }
      ],
      "id": "10ad4631-89c1-41c0-8e66-a3152ef5fee7"
    },
    {
      "default-test": "3ac876be-00c5-4ab2-93fd-82c105cfdcd0",
      "flow": [
        {
          "$action": "json/decode",
          "json": {
            "__LDATA__": [
              "input"
            ]
          },
          "output-location": {
            "__LDATA__": [
              "input"
            ]
          }
        },
        {
          "$action": "organization/group",
          "do": [
            {
              "$action": "string/to-float",
              "output-location": {
                "__LDATA__": [
                  "input",
                  "lat"
                ]
              },
              "string": {
                "__LDATA__": [
                  "input",
                  "lat"
                ]
              }
            },
            {
              "$action": "string/to-float",
              "output-location": {
                "__LDATA__": [
                  "input",
                  "long"
                ]
              },
              "string": {
                "__LDATA__": [
                  "input",
                  "long"
                ]
              }
            },
            {
              "$action": "float/round",
              "float": {
                "__LDATA__": [
                  "input",
                  "lat"
                ]
              },
              "output-location": {
                "__LDATA__": [
                  "input",
                  "lat"
                ]
              },
              "precision": 3
            },
            {
              "$action": "float/round",
              "float": {
                "__LDATA__": [
                  "input",
                  "long"
                ]
              },
              "output-location": {
                "__LDATA__": [
                  "input",
                  "long"
                ]
              },
              "precision": 3
            }
          ],
          "name": "rounding"
        },
        {
          "$action": "organization/group",
          "do": [
            {
              "$action": "data/expression",
              "expression": "var1 - 0.005",
              "name": "data/expression",
              "output-location": {
                "__LDATA__": [
                  "lat_min"
                ]
              },
              "variables": [
                {
                  "name": "var1",
                  "target": {
                    "__LDATA__": [
                      "input",
                      "lat"
                    ]
                  }
                }
              ]
            },
            {
              "$action": "data/expression",
              "expression": "var1 + 0.005",
              "output-location": {
                "__LDATA__": [
                  "lat_max"
                ]
              },
              "variables": [
                {
                  "name": "var1",
                  "target": {
                    "__LDATA__": [
                      "input",
                      "lat"
                    ]
                  }
                }
              ]
            },
            {
              "$action": "data/expression",
              "expression": "var1 - 0.005",
              "name": "data/expression",
              "output-location": {
                "__LDATA__": [
                  "long_min"
                ]
              },
              "variables": [
                {
                  "name": "var1",
                  "target": {
                    "__LDATA__": [
                      "input",
                      "long"
                    ]
                  }
                }
              ]
            },
            {
              "$action": "data/expression",
              "expression": "var1 + 0.005",
              "output-location": {
                "__LDATA__": [
                  "long_max"
                ]
              },
              "variables": [
                {
                  "name": "var1",
                  "target": {
                    "__LDATA__": [
                      "input",
                      "long"
                    ]
                  }
                }
              ]
            },
            {
              "$action": "float/round",
              "float": {
                "__LDATA__": [
                  "lat_min"
                ]
              },
              "output-location": {
                "__LDATA__": [
                  "lat_min"
                ]
              },
              "precision": 3
            },
            {
              "$action": "float/round",
              "float": {
                "__LDATA__": [
                  "lat_max"
                ]
              },
              "output-location": {
                "__LDATA__": [
                  "lat_max"
                ]
              },
              "precision": 3
            },
            {
              "$action": "float/round",
              "float": {
                "__LDATA__": [
                  "long_min"
                ]
              },
              "output-location": {
                "__LDATA__": [
                  "long_min"
                ]
              },
              "precision": 3
            },
            {
              "$action": "float/round",
              "float": {
                "__LDATA__": [
                  "long_max"
                ]
              },
              "output-location": {
                "__LDATA__": [
                  "long_max"
                ]
              },
              "precision": 3
            }
          ],
          "name": "prepare lat and long"
        },
        {
          "$action": "json/encode",
          "data": {
            "lat_max": {
              "__LDATA__": [
                "lat_max"
              ]
            },
            "lat_min": {
              "__LDATA__": [
                "lat_min"
              ]
            },
            "lomg_max": {
              "__LDATA__": [
                "long_max"
              ]
            },
            "long_min": {
              "__LDATA__": [
                "long_min"
              ]
            }
          },
          "output-location": {
            "__LDATA__": [
              "output"
            ]
          }
        }
      ],
      "id": "de06a5a1-2dfc-44a9-9e08-ec8e9f32013a"
    },
    {
      "flow": [
        {
          "$action": "organization/group",
          "do": [
            {
              "$action": "string/join",
              "array": [
                "SELECT * FROM public.\"bus_position\" WHERE bus_id = '",
                "1",
                "' ORDER BY id DESC"
              ],
              "output-location": {
                "__LDATA__": [
                  "query"
                ]
              },
              "separator": ""
            },
            {
              "$action": "database/postgres/query",
              "address": "127.0.0.1",
              "database": "transportation",
              "format": "processed",
              "mock-result": {
                "columns": [
                  "column1",
                  "column2"
                ],
                "num_rows": 2,
                "rows": [
                  [
                    "col1_val1",
                    "col2_val1"
                  ],
                  [
                    "col1_val2",
                    "col2_val2"
                  ]
                ]
              },
              "output-location": {
                "__LDATA__": [
                  "result"
                ]
              },
              "password": "navid1234",
              "port": 5432,
              "query": {
                "__LDATA__": [
                  "query"
                ]
              },
              "use-mock-result": false,
              "username": "postgres"
            },
            {
              "$action": "array/count",
              "array": {
                "__LDATA__": [
                  "result"
                ]
              },
              "output-location": {
                "__LDATA__": [
                  "array-count"
                ]
              }
            }
          ],
          "name": "prepare data"
        },
        {
          "$action": "conditional/if",
          "else": [],
          "expression": "",
          "name": "if records are more than 10",
          "then": [
            {
              "$action": "array/at",
              "array": {
                "__LDATA__": [
                  "result"
                ]
              },
              "at": 0,
              "output-location": {
                "__LDATA__": [
                  "result0"
                ]
              }
            },
            {
              "$action": "array/at",
              "array": {
                "__LDATA__": [
                  "result"
                ]
              },
              "at": 9,
              "output-location": {
                "__LDATA__": [
                  "result9"
                ]
              }
            },
            {
              "$action": "conditional/if",
              "else": [],
              "expression": "",
              "name": "if waiting 10 minutes",
              "then": [
                {
                  "$action": "communication/http-request",
                  "body": "{\"text\":\"******    PROBLEM  === >>> The bus 1 is staying for 10 minutes in the same position\"}",
                  "header": {
                    "Content-type": "application/json"
                  },
                  "method": "POST",
                  "mock-result": {
                    "body": "",
                    "header": {},
                    "status-code": 200
                  },
                  "output-location": {
                    "__LDATA__": [
                      "response",
                      "body"
                    ]
                  },
                  "query": {},
                  "timeout": 5000,
                  "url": "####### COMENT #######     https://hooks.slack.com/services/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",
                  "url-variables": {},
                  "use-mock-result": false
                }
              ],
              "variables": [
                {
                  "$condition": "number/is-equal",
                  "name": "condition1",
                  "target": {
                    "__LDATA__": [
                      "result0",
                      "lat"
                    ]
                  },
                  "value": {
                    "__LDATA__": [
                      "result9",
                      "lat"
                    ]
                  }
                },
                {
                  "$condition": "number/is-equal",
                  "name": "condition2",
                  "target": {
                    "__LDATA__": [
                      "result0",
                      "long"
                    ]
                  },
                  "value": {
                    "__LDATA__": [
                      "result9",
                      "long"
                    ]
                  }
                }
              ]
            }
          ],
          "variables": [
            {
              "$condition": "number/is-greater",
              "name": "condition1",
              "target": {
                "__LDATA__": [
                  "array-count"
                ]
              },
              "value": 9
            }
          ]
        }
      ],
      "id": "99cbc81a-c76c-4802-b8b6-b8f720f31c8d"
    },
    {
      "default-test": "1a66e87f-e182-4d0b-946c-bc2c02351c20",
      "flow": [
        {
          "$action": "database/postgres/query",
          "address": "127.0.0.1",
          "database": "transportation",
          "format": "processed",
          "mock-result": {
            "columns": [
              "column1",
              "column2"
            ],
            "num_rows": 2,
            "rows": [
              [
                "col1_val1",
                "col2_val1"
              ],
              [
                "col1_val2",
                "col2_val2"
              ]
            ]
          },
          "output-location": {
            "__LDATA__": [
              "response",
              "body"
            ]
          },
          "password": "navid1234",
          "port": 5432,
          "query": "SELECT * FROM public.\"stations\" ORDER BY id",
          "use-mock-result": false,
          "username": "postgres"
        }
      ],
      "id": "fe7630a7-d476-4b3f-ae9c-c8a2d27b0c24"
    },
    {
      "default-test": "2e41a1d1-e5cf-4e92-9c47-ea2ede0818ad",
      "flow": [
        {
          "$action": "flow/call",
          "flow-id": "543a32ec-cb17-48e1-ba22-863d33763a7f",
          "input": {
            "data": {
              "__LDATA__": [
                "request",
                "body"
              ]
            },
            "what": "bus"
          },
          "name": "insert to db",
          "output-location": {
            "__LDATA__": []
          }
        }
      ],
      "id": "14176f19-0f7f-4228-a429-b5704c54e139"
    },
    {
      "default-test": "b2b0c78b-8c30-4bf5-92c0-799a2917f576",
      "flow": [
        {
          "$action": "conditional/switch",
          "cases": [
            {
              "do": [
                {
                  "$action": "json/decode",
                  "json": {
                    "__LDATA__": [
                      "input",
                      "data"
                    ]
                  },
                  "output-location": {
                    "__LDATA__": [
                      "input",
                      "data"
                    ]
                  }
                },
                {
                  "$action": "string/join",
                  "array": [
                    "INSERT INTO public.\"buses\" (\"bus_name\") VALUES ('",
                    {
                      "__LDATA__": [
                        "input",
                        "data",
                        "bus_name"
                      ]
                    },
                    "')"
                  ],
                  "output-location": {
                    "__LDATA__": [
                      "query"
                    ]
                  },
                  "separator": ""
                }
              ],
              "name": "case1",
              "value": "bus"
            },
            {
              "do": [
                {
                  "$action": "json/decode",
                  "json": {
                    "__LDATA__": [
                      "input",
                      "data"
                    ]
                  },
                  "output-location": {
                    "__LDATA__": [
                      "input",
                      "data"
                    ]
                  }
                },
                {
                  "$action": "string/join",
                  "array": [
                    "INSERT INTO public.\"stations\" (\"station_name\",\"lat\",\"long\") VALUES ('",
                    {
                      "__LDATA__": [
                        "input",
                        "data",
                        "station_name"
                      ]
                    },
                    "','",
                    {
                      "__LDATA__": [
                        "input",
                        "data",
                        "lat"
                      ]
                    },
                    "','",
                    {
                      "__LDATA__": [
                        "input",
                        "data",
                        "long"
                      ]
                    },
                    "')"
                  ],
                  "output-location": {
                    "__LDATA__": [
                      "query"
                    ]
                  },
                  "separator": ""
                }
              ],
              "name": "case2",
              "value": "station"
            },
            {
              "do": [
                {
                  "$action": "json/decode",
                  "json": {
                    "__LDATA__": [
                      "input",
                      "data"
                    ]
                  },
                  "output-location": {
                    "__LDATA__": [
                      "input",
                      "data"
                    ]
                  }
                },
                {
                  "$action": "string/join",
                  "array": [
                    "INSERT INTO public.\"bus_position\" (\"bus_id\",\"lat\",\"long\",\"situation\",\"time\",\"last_visited_station\") VALUES ('",
                    {
                      "__LDATA__": [
                        "input",
                        "data",
                        "bus_id"
                      ]
                    },
                    "','",
                    {
                      "__LDATA__": [
                        "input",
                        "data",
                        "lat"
                      ]
                    },
                    "','",
                    {
                      "__LDATA__": [
                        "input",
                        "data",
                        "long"
                      ]
                    },
                    "','",
                    {
                      "__LDATA__": [
                        "input",
                        "data",
                        "situation"
                      ]
                    },
                    "','",
                    {
                      "__LDATA__": [
                        "input",
                        "data",
                        "time"
                      ]
                    },
                    "','",
                    {
                      "__LDATA__": [
                        "input",
                        "data",
                        "last_visited_station"
                      ]
                    },
                    "')"
                  ],
                  "output-location": {
                    "__LDATA__": [
                      "query"
                    ]
                  },
                  "separator": ""
                }
              ],
              "name": "case3",
              "value": "bus_position"
            }
          ],
          "default": [],
          "name": "what you want to insert ?",
          "target": {
            "__LDATA__": [
              "input",
              "what"
            ]
          }
        },
        {
          "$action": "database/postgres/query",
          "address": "127.0.0.1",
          "database": "transportation",
          "format": "processed",
          "mock-result": {
            "columns": [
              "column1",
              "column2"
            ],
            "num_rows": 2,
            "rows": [
              [
                "col1_val1",
                "col2_val1"
              ],
              [
                "col1_val2",
                "col2_val2"
              ]
            ]
          },
          "output-location": {
            "__LDATA__": [
              "result"
            ]
          },
          "password": "navid1234",
          "port": 5432,
          "query": {
            "__LDATA__": [
              "query"
            ]
          },
          "use-mock-result": false,
          "username": "postgres"
        }
      ],
      "id": "543a32ec-cb17-48e1-ba22-863d33763a7f"
    },
    {
      "flow": [
        {
          "$action": "organization/group",
          "do": [
            {
              "$action": "string/join",
              "array": [
                "SELECT * FROM public.\"bus_position\" WHERE bus_id = '",
                "1",
                "' ORDER BY id DESC"
              ],
              "output-location": {
                "__LDATA__": [
                  "query"
                ]
              },
              "separator": ""
            },
            {
              "$action": "database/postgres/query",
              "address": "127.0.0.1",
              "database": "transportation",
              "format": "processed",
              "mock-result": {
                "columns": [
                  "column1",
                  "column2"
                ],
                "num_rows": 2,
                "rows": [
                  [
                    "col1_val1",
                    "col2_val1"
                  ],
                  [
                    "col1_val2",
                    "col2_val2"
                  ]
                ]
              },
              "output-location": {
                "__LDATA__": [
                  "result",
                  "positions_log_during_last_day"
                ]
              },
              "password": "navid1234",
              "port": 5432,
              "query": {
                "__LDATA__": [
                  "query"
                ]
              },
              "use-mock-result": false,
              "username": "postgres"
            },
            {
              "$action": "array/count",
              "array": {
                "__LDATA__": [
                  "result",
                  "positions_log_during_last_day"
                ]
              },
              "output-location": {
                "__LDATA__": [
                  "result",
                  "positions_count_during_last_day"
                ]
              }
            }
          ],
          "name": "read data from database"
        },
        {
          "$action": "organization/group",
          "do": [
            {
              "$action": "datetime/now",
              "output-location": {
                "__LDATA__": [
                  "result",
                  "date_and_time"
                ]
              },
              "time-unit": "second"
            },
            {
              "$action": "data/set",
              "at-location": {
                "__LDATA__": [
                  "result",
                  "bus_id"
                ]
              },
              "value": "1"
            },
            {
              "$action": "data/set",
              "at-location": {
                "__LDATA__": [
                  "result",
                  "bus_name"
                ]
              },
              "value": "line 1 - 1"
            }
          ],
          "name": "prepare data"
        },
        {
          "$action": "organization/group",
          "do": [
            {
              "$action": "string/join",
              "array": [
                "/Users/navid/Downloads/my solutions/bus_",
                {
                  "__LDATA__": [
                    "result",
                    "bus_id"
                  ]
                },
                "_",
                {
                  "__LDATA__": [
                    "result",
                    "date_and_time"
                  ]
                },
                ".txt"
              ],
              "output-location": {
                "__LDATA__": [
                  "file_name"
                ]
              },
              "separator": ""
            },
            {
              "$action": "json/encode",
              "data": {
                "__LDATA__": [
                  "result"
                ]
              },
              "output-location": {
                "__LDATA__": [
                  "result"
                ]
              }
            },
            {
              "$action": "file/write",
              "content": {
                "__LDATA__": [
                  "result"
                ]
              },
              "file": {
                "__LDATA__": [
                  "file_name"
                ]
              },
              "mock-result": "success",
              "status-output-location": {
                "__LDATA__": [
                  "result"
                ]
              },
              "use-mock-result": false
            },
            {
              "$action": "database/postgres/query",
              "address": "127.0.0.1",
              "database": "transportation",
              "format": "processed",
              "mock-result": {
                "columns": [
                  "column1",
                  "column2"
                ],
                "num_rows": 2,
                "rows": [
                  [
                    "col1_val1",
                    "col2_val1"
                  ],
                  [
                    "col1_val2",
                    "col2_val2"
                  ]
                ]
              },
              "output-location": {
                "__LDATA__": [
                  "result"
                ]
              },
              "password": "navid1234",
              "port": 5432,
              "query": "####   COMENT ####     DELETE FROM public.\"bus_position\"",
              "use-mock-result": false,
              "username": "postgres"
            }
          ],
          "name": "action"
        }
      ],
      "id": "40ecabae-9541-443c-b6c7-a55fc091dc5f"
    }
  ],
  "Inbound": [
    {
      "access-control-allow-origin": "null",
      "id": "107c6117-4f62-47c1-9587-9ba601cf8f12",
      "port": 1001,
      "type": "http server"
    }
  ],
  "InboundEndpoint": [
    {
      "default-test": "1a66e87f-e182-4d0b-946c-bc2c02351c20",
      "id": "f9fe063d-e278-4aa8-bab4-af5ef96b76d1",
      "methods": [
        "GET"
      ],
      "path": "/get-stations",
      "type": "endpoint"
    },
    {
      "default-test": "d11874de-0843-4f27-9c9b-7e00e6aa03dd",
      "id": "f33c380b-273e-405b-ada4-40cb1ebd3934",
      "methods": [
        "GET"
      ],
      "path": "/get-buses",
      "type": "endpoint"
    },
    {
      "default-test": "2e41a1d1-e5cf-4e92-9c47-ea2ede0818ad",
      "id": "d08307fc-6482-4da7-aff0-7fca63f41871",
      "methods": [
        "POST"
      ],
      "path": "/insert-bus",
      "type": "endpoint"
    },
    {
      "default-test": "f911cce2-e08e-4a9c-a583-f095526b2ae2",
      "id": "67010f2f-ef6a-4162-aaf0-16e58352ae67",
      "methods": [
        "GET"
      ],
      "path": "/simulate-position",
      "type": "endpoint"
    },
    {
      "default-test": "d757ecdb-e74a-4ec0-972b-516b2f4c231a",
      "id": "16f5b39f-a12d-438f-b4c0-b634dbb6b79c",
      "methods": [
        "POST"
      ],
      "path": "/insert-station",
      "type": "endpoint"
    },
    {
      "default-test": "11531c17-809a-43f8-b9fe-21a166bae674",
      "id": "52a9de96-4401-4c53-b171-1d21e3126447",
      "methods": [
        "POST"
      ],
      "path": "/insert-bus-route",
      "type": "endpoint"
    },
    {
      "default-test": "e2dbe48a-7479-4dbe-8dc2-34e5dc6f4dd8",
      "id": "65c9dcd1-c5fc-4f37-845a-972dba9b0b28",
      "methods": [
        "POST"
      ],
      "path": "/get-bus-route",
      "type": "endpoint"
    },
    {
      "default-test": "e10f572e-4cb0-44e2-b21b-5426bb974d48",
      "id": "54ea83ff-e7c3-409c-a845-8a0f2bd12ae2",
      "methods": [
        "POST"
      ],
      "path": "/insert-bus-position",
      "type": "endpoint"
    },
    {
      "default-test": "930c841f-02dd-48de-ab5b-1c188bbfe4fa",
      "id": "e1e9c233-2eca-4035-882e-39401a0ac574",
      "methods": [
        "POST"
      ],
      "path": "/update-timers",
      "type": "endpoint"
    }
  ],
  "ResourceInfo": [
    {
      "id": "38b7b3e7-82c1-4cf3-9fb6-90a5938c39cf",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "playlist-simple"
    },
    {
      "id": "62a42f48-4618-4c73-92a3-cdede8ba5351",
      "parentId": "ac3aa7f9-602a-4305-81e6-6748685c77ec",
      "resourceType": "SchemaHttpOperation",
      "title": "POST /users/{user_id}/playlists"
    },
    {
      "id": "2830a289-52ef-4bd2-bc27-d273376e8a9d",
      "parentId": "de06a5a1-2dfc-44a9-9e08-ec8e9f32013a",
      "resourceType": "Test",
      "title": "default-test-input"
    },
    {
      "id": "f9fe063d-e278-4aa8-bab4-af5ef96b76d1",
      "parentId": "107c6117-4f62-47c1-9587-9ba601cf8f12",
      "resourceType": "InboundEndpoint",
      "title": "get stations"
    },
    {
      "id": "3c55c089-b4bd-4d22-a6ce-af9e804df952",
      "resourceType": "DataGroup",
      "title": "bus_route"
    },
    {
      "id": "3ec76929-40cd-4d2e-994c-6f384c53d0c9",
      "parentId": "683fa548-978e-47d1-9e82-cdb0aa51d1b1",
      "resourceType": "SchemaHttpOperation",
      "title": "PUT /me/tracks"
    },
    {
      "id": "05de7a66-091f-426d-84b5-cdd5910fb055",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "5f8e6174-2e56-4ad9-b122-a2d09366e55b",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "user-followed"
    },
    {
      "id": "b1482406-06f1-4c9c-ac5d-a134eb093ce3",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "featured-playlists"
    },
    {
      "id": "7ed6c91f-c0ef-432d-bf9b-c5bdb5f41057",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "e10f572e-4cb0-44e2-b21b-5426bb974d48",
      "parentId": "4cf5ae01-8ee7-4333-8845-07ca8d1c8a15",
      "resourceType": "Test",
      "title": "default-test-input"
    },
    {
      "id": "e567a628-7940-4bd9-9963-50c9aa2f395e",
      "parentId": "4da5f239-275f-4795-a1d3-2b2daacf56fd",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /me/following/contains"
    },
    {
      "id": "993f9d90-0ea3-4ef9-b6d0-0d9487d57bc0",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "artist-simple"
    },
    {
      "id": "03f74efb-ad80-4a10-83de-7672c06ae4e9",
      "parentId": "65376f4b-dd5c-495e-9b46-7451c42d3722",
      "resourceType": "SchemaHttpOperation",
      "title": "PUT /users/{user_id}/playlists/{playlist_id}"
    },
    {
      "id": "71ce2326-d4eb-4c42-a56d-a2930824b35f",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSecurityScheme",
      "title": "oauth_2_0_implicit"
    },
    {
      "id": "b730129e-1c04-4c47-9248-29d1bf178b9b",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "saved-track"
    },
    {
      "id": "6b664c8f-01ba-4404-a603-407661cae036",
      "parentId": "32a7730b-1bca-4f9c-92cd-4b66271e34ac",
      "resourceType": "SchemaHttpOperation",
      "title": "PUT /users/{user_id}/playlists/{playlist_id}/tracks"
    },
    {
      "id": "d757ecdb-e74a-4ec0-972b-516b2f4c231a",
      "parentId": "03f038e9-5981-4fa7-b83a-e8f46e21e70b",
      "resourceType": "Test",
      "title": "default-test-input"
    },
    {
      "id": "7a5d3152-3eed-4677-b357-2be7e5713706",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "playlist-track"
    },
    {
      "id": "80c5e6d2-5770-40a5-9d9a-6e8bb5520d95",
      "parentId": "7a607ba2-2cf2-4d1d-a352-31a4eadd8d5d",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /albums/{id}"
    },
    {
      "id": "2d3213c8-0aea-4247-be38-d2f75a0f4b1d",
      "parentId": "188f91f1-8aea-490c-8373-fa263dabc876",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /me/following"
    },
    {
      "id": "ef67839f-5c98-43d4-ac4d-ef384463b6ad",
      "parentId": "3ab5b8ca-a0f2-4404-8491-0bdf6b59430f",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /users/{user_id}/playlists/{playlist_id}/followers/contains"
    },
    {
      "id": "14fa15e0-48f9-4803-9339-78713508bf08",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "f1490449-adb2-4a23-a3d0-597be4159173",
      "resourceType": "Timer",
      "title": "update bus position"
    },
    {
      "id": "d08307fc-6482-4da7-aff0-7fca63f41871",
      "parentId": "107c6117-4f62-47c1-9587-9ba601cf8f12",
      "resourceType": "InboundEndpoint",
      "title": "insert bus"
    },
    {
      "id": "f33c380b-273e-405b-ada4-40cb1ebd3934",
      "parentId": "107c6117-4f62-47c1-9587-9ba601cf8f12",
      "resourceType": "InboundEndpoint",
      "title": "get buses"
    },
    {
      "id": "8d57b13c-e39f-4a6c-b6f5-dad96d8ae953",
      "parentId": "7ed6c91f-c0ef-432d-bf9b-c5bdb5f41057",
      "resourceType": "SchemaHttpOperation",
      "title": "PUT /users/{user_id}/playlists/{playlist_id}/followers"
    },
    {
      "id": "6963438f-24d9-402c-8ea0-7c4db5ac072f",
      "parentId": "f1490449-adb2-4a23-a3d0-597be4159173",
      "resourceType": "Flow"
    },
    {
      "id": "f911cce2-e08e-4a9c-a583-f095526b2ae2",
      "parentId": "2b898600-62a9-48a4-b06d-0dff741f4cb8",
      "resourceType": "Test",
      "title": "default-test-input"
    },
    {
      "id": "6e1bf70f-1537-4843-b186-810e96a11a63",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "playlist-simple-page"
    },
    {
      "id": "b5d3cb16-7ff0-4ad9-9b90-83816c144629",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "album-simple-page"
    },
    {
      "id": "4da5f239-275f-4795-a1d3-2b2daacf56fd",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "63a1391f-ad07-4727-b173-574410a362b4",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "Schema",
      "title": "Spotify"
    },
    {
      "id": "2f788b04-7d19-483e-96e1-3fdaa1f5cb01",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "track-simple"
    },
    {
      "id": "107c6117-4f62-47c1-9587-9ba601cf8f12",
      "resourceType": "Inbound",
      "title": "transportation"
    },
    {
      "id": "7244241a-97c1-4fec-a89c-a972ba9d44f6",
      "parentId": "14fa15e0-48f9-4803-9339-78713508bf08",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /browse/new-releases"
    },
    {
      "id": "7a607ba2-2cf2-4d1d-a352-31a4eadd8d5d",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "86bc1097-6c04-46e0-8ae7-fbbdaa8f2f59",
      "parentId": "f4a7bfbf-90a3-47c6-9512-6a35a0c2e92c",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /browse/categories/{category_id}/playlists"
    },
    {
      "id": "4364b02d-016a-4654-b34e-d4a0d4b3ffd9",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "playlist-track-page"
    },
    {
      "id": "e3f896ad-05fe-43bf-bc49-de124045c514",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "f7028183-86e1-4808-86f4-675eedc3af48",
      "parentId": "188f91f1-8aea-490c-8373-fa263dabc876",
      "resourceType": "SchemaHttpOperation",
      "title": "DELETE /me/following"
    },
    {
      "id": "11efd1b8-f0b3-4d80-b45b-80d160e26b31",
      "parentId": "f33c380b-273e-405b-ada4-40cb1ebd3934",
      "resourceType": "Flow"
    },
    {
      "id": "ac3aa7f9-602a-4305-81e6-6748685c77ec",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "9681ddba-3089-499e-8eb1-30036c65b84e",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "track-simple-page"
    },
    {
      "id": "89452de0-2028-47f7-a349-e5d6e0e90a31",
      "parentId": "07c2e483-26ed-4e93-9f5a-d0c264ab30ea",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /artists/{id}/top-tracks"
    },
    {
      "id": "e892c7c3-5288-4bec-8499-fb5f5a66d970",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "category-page"
    },
    {
      "id": "09ccee56-8762-4012-962b-6f0f62f591c4",
      "parentId": "32a7730b-1bca-4f9c-92cd-4b66271e34ac",
      "resourceType": "SchemaHttpOperation",
      "title": "POST /users/{user_id}/playlists/{playlist_id}/tracks"
    },
    {
      "id": "12a6e06d-506c-49a9-90e2-82edf1cd6104",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "0b90746f-5776-4fa0-b050-8aee9c02505a",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "image"
    },
    {
      "id": "65376f4b-dd5c-495e-9b46-7451c42d3722",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "67010f2f-ef6a-4162-aaf0-16e58352ae67",
      "parentId": "107c6117-4f62-47c1-9587-9ba601cf8f12",
      "resourceType": "InboundEndpoint",
      "title": "simulate position"
    },
    {
      "id": "4cf5ae01-8ee7-4333-8845-07ca8d1c8a15",
      "parentId": "54ea83ff-e7c3-409c-a845-8a0f2bd12ae2",
      "resourceType": "Flow"
    },
    {
      "id": "52919371-e0b4-41be-ba50-4bf93382bc00",
      "parentId": "32a7730b-1bca-4f9c-92cd-4b66271e34ac",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /users/{user_id}/playlists/{playlist_id}/tracks"
    },
    {
      "id": "2e41a1d1-e5cf-4e92-9c47-ea2ede0818ad",
      "parentId": "14176f19-0f7f-4228-a429-b5704c54e139",
      "resourceType": "Test",
      "title": "default-test-input"
    },
    {
      "id": "03f038e9-5981-4fa7-b83a-e8f46e21e70b",
      "parentId": "16f5b39f-a12d-438f-b4c0-b634dbb6b79c",
      "resourceType": "Flow"
    },
    {
      "id": "73ce7639-a277-47e0-908e-442f3e0027cf",
      "parentId": "e1e9c233-2eca-4035-882e-39401a0ac574",
      "resourceType": "Flow"
    },
    {
      "id": "037aa9cb-8140-4064-a4ef-3e4df1d39f77",
      "parentId": "9c3b88f0-1d33-4047-bdd5-b1c67025642d",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /browse/categories/{category_id}"
    },
    {
      "id": "86cc86a8-dd7f-4a2f-9bda-e9df7e9e996b",
      "parentId": "12a6e06d-506c-49a9-90e2-82edf1cd6104",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /browse/categories"
    },
    {
      "id": "8afbbfd7-0bf6-4ec2-9001-1c05b790d755",
      "parentId": "e3999b84-731b-4a1e-ae60-6ef7852c4dbe",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /artists"
    },
    {
      "id": "16f5b39f-a12d-438f-b4c0-b634dbb6b79c",
      "parentId": "107c6117-4f62-47c1-9587-9ba601cf8f12",
      "resourceType": "InboundEndpoint",
      "title": "insert station"
    },
    {
      "id": "ccbd1b25-7bac-43a6-9128-c974e81d9d38",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "album-simple"
    },
    {
      "id": "1a66e87f-e182-4d0b-946c-bc2c02351c20",
      "parentId": "fe7630a7-d476-4b3f-ae9c-c8a2d27b0c24",
      "resourceType": "Test",
      "title": "default-test-input"
    },
    {
      "id": "4c9b85ca-389d-472f-a2aa-4d4d7d77842c",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "52a9de96-4401-4c53-b171-1d21e3126447",
      "parentId": "107c6117-4f62-47c1-9587-9ba601cf8f12",
      "resourceType": "InboundEndpoint",
      "title": "insert bus route"
    },
    {
      "id": "64fc9caa-5f8c-42b6-9c6c-856dc7b40d85",
      "parentId": "683fa548-978e-47d1-9e82-cdb0aa51d1b1",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /me/tracks"
    },
    {
      "id": "a70f5984-713c-45f8-a8c0-b6765d20b020",
      "parentId": "683fa548-978e-47d1-9e82-cdb0aa51d1b1",
      "resourceType": "SchemaHttpOperation",
      "title": "DELETE /me/tracks"
    },
    {
      "id": "7332525c-145f-411d-8475-c7bb2d51d571",
      "parentId": "65c9dcd1-c5fc-4f37-845a-972dba9b0b28",
      "resourceType": "Flow"
    },
    {
      "id": "683fa548-978e-47d1-9e82-cdb0aa51d1b1",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "dd623aaf-7195-495c-9f22-eb3be5d92f1f",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "current-user-profile"
    },
    {
      "id": "2b898600-62a9-48a4-b06d-0dff741f4cb8",
      "parentId": "67010f2f-ef6a-4162-aaf0-16e58352ae67",
      "resourceType": "Flow"
    },
    {
      "id": "12d6607e-d9fe-44c0-a2e9-a52783dc82f1",
      "resourceType": "SchemaHttpOauth",
      "title": "https://accounts.spotify.com/authorize"
    },
    {
      "id": "9c3b88f0-1d33-4047-bdd5-b1c67025642d",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "e3d18562-9f8e-4e74-89fb-ed74e18a599f",
      "parentId": "543a32ec-cb17-48e1-ba22-863d33763a7f",
      "resourceType": "Test",
      "title": "default-test-input"
    },
    {
      "id": "58479126-9787-4143-bbac-c28ea4903425",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "bec2b851-2f84-45d2-9f61-4d18a7fbf850",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "playlist"
    },
    {
      "id": "91f91a57-bbc2-4105-a2d8-6568519dad80",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "65c9dcd1-c5fc-4f37-845a-972dba9b0b28",
      "parentId": "107c6117-4f62-47c1-9587-9ba601cf8f12",
      "resourceType": "InboundEndpoint",
      "title": "get bus route"
    },
    {
      "id": "235cb407-c610-4893-9587-8b0345225129",
      "parentId": "188f91f1-8aea-490c-8373-fa263dabc876",
      "resourceType": "SchemaHttpOperation",
      "title": "PUT /me/following"
    },
    {
      "id": "34f4fb48-935a-4bc3-bdde-f7442b956143",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "00f7484f-04be-483d-a64e-277cf8f042dd",
      "parentId": "e11152c7-e36b-4b84-9d67-18e48d439de3",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /users/{user_id}"
    },
    {
      "id": "930c841f-02dd-48de-ab5b-1c188bbfe4fa",
      "parentId": "73ce7639-a277-47e0-908e-442f3e0027cf",
      "resourceType": "Test",
      "title": "default-test-input"
    },
    {
      "id": "013b7c5c-e722-42a2-81f3-5ca5f7c5ab6a",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "54ea83ff-e7c3-409c-a845-8a0f2bd12ae2",
      "parentId": "107c6117-4f62-47c1-9587-9ba601cf8f12",
      "resourceType": "InboundEndpoint",
      "title": "insert bus position"
    },
    {
      "id": "10ad4631-89c1-41c0-8e66-a3152ef5fee7",
      "parentId": "52a9de96-4401-4c53-b171-1d21e3126447",
      "resourceType": "Flow"
    },
    {
      "id": "eda97ea4-f2df-4d11-aa81-e2375223a32b",
      "parentId": "4c9b85ca-389d-472f-a2aa-4d4d7d77842c",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /search"
    },
    {
      "id": "a0bdd637-839d-4c27-8d52-79761627a934",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "followers"
    },
    {
      "id": "62ce036d-f5ef-494e-afcc-b821c19bf8a3",
      "parentId": "63a1391f-ad07-4727-b173-574410a362b4",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /artists/{id}"
    },
    {
      "id": "301e96a9-82b5-4b80-b2ba-eb796f6dce8b",
      "parentId": "013b7c5c-e722-42a2-81f3-5ca5f7c5ab6a",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /me"
    },
    {
      "id": "32a7730b-1bca-4f9c-92cd-4b66271e34ac",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "afcb26a0-b37c-41db-8ad4-85c3593af13f",
      "parentId": "34f4fb48-935a-4bc3-bdde-f7442b956143",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /tracks/{id}"
    },
    {
      "id": "6c8243e5-86ef-423a-ad93-8759aafad983",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "album"
    },
    {
      "id": "e11152c7-e36b-4b84-9d67-18e48d439de3",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "de06a5a1-2dfc-44a9-9e08-ec8e9f32013a",
      "resourceType": "Flow",
      "title": "rounding lat long"
    },
    {
      "id": "188f91f1-8aea-490c-8373-fa263dabc876",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "be0d9484-5f61-40f4-befb-8563c15bd9fd",
      "resourceType": "Timer",
      "title": "clean bus_position table"
    },
    {
      "id": "048a126e-c9b8-4d24-a32d-dcaf716e6823",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "search"
    },
    {
      "id": "b4d326d5-5457-48d6-a682-af595306343f",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "user-profile"
    },
    {
      "id": "6338d7d9-4e68-45a3-a24b-8535a02075ad",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "c2ba71a7-36cc-4f45-8746-fb422008d8df",
      "parentId": "6338d7d9-4e68-45a3-a24b-8535a02075ad",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /tracks"
    },
    {
      "id": "bdb9fc44-c171-42ac-9a74-196905d35851",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "saved-track-page"
    },
    {
      "id": "3e47b7c6-e6a9-475a-94ed-d3efbf2c0b36",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "album-track-page"
    },
    {
      "id": "ede59e76-7cf7-4e00-9a77-f537ce3f44ed",
      "resourceType": "Timer",
      "title": "check bus situation"
    },
    {
      "id": "99cbc81a-c76c-4802-b8b6-b8f720f31c8d",
      "parentId": "ede59e76-7cf7-4e00-9a77-f537ce3f44ed",
      "resourceType": "Flow"
    },
    {
      "id": "8c35253b-49d8-498e-92f1-79954d8cb2ab",
      "parentId": "7ed6c91f-c0ef-432d-bf9b-c5bdb5f41057",
      "resourceType": "SchemaHttpOperation",
      "title": "DELETE /users/{user_id}/playlists/{playlist_id}/followers"
    },
    {
      "id": "d11874de-0843-4f27-9c9b-7e00e6aa03dd",
      "parentId": "11efd1b8-f0b3-4d80-b45b-80d160e26b31",
      "resourceType": "Test",
      "title": "default-test-input"
    },
    {
      "id": "fe7630a7-d476-4b3f-ae9c-c8a2d27b0c24",
      "parentId": "f9fe063d-e278-4aa8-bab4-af5ef96b76d1",
      "resourceType": "Flow"
    },
    {
      "id": "974f9915-cc7f-4110-b347-35efdb058c71",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSecurityScheme",
      "title": "oauth_2_0_accessCode"
    },
    {
      "id": "07c2e483-26ed-4e93-9f5a-d0c264ab30ea",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "b4a83b39-196c-468a-a257-c2d854d5aa96",
      "parentId": "32a7730b-1bca-4f9c-92cd-4b66271e34ac",
      "resourceType": "SchemaHttpOperation",
      "title": "DELETE /users/{user_id}/playlists/{playlist_id}/tracks"
    },
    {
      "id": "114ba8f6-8c40-48f3-900c-be5b6c3893a7",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "category"
    },
    {
      "id": "5d125274-9645-4e3d-9610-5982e7ffc156",
      "parentId": "e3f896ad-05fe-43bf-bc49-de124045c514",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /albums"
    },
    {
      "id": "14176f19-0f7f-4228-a429-b5704c54e139",
      "parentId": "d08307fc-6482-4da7-aff0-7fca63f41871",
      "resourceType": "Flow"
    },
    {
      "id": "543a32ec-cb17-48e1-ba22-863d33763a7f",
      "resourceType": "Flow",
      "title": "insert to db"
    },
    {
      "id": "3ab5b8ca-a0f2-4404-8491-0bdf6b59430f",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "8f0b460a-3807-4078-a061-6ee8e9fc9635",
      "parentId": "91f91a57-bbc2-4105-a2d8-6568519dad80",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /me/tracks/contains"
    },
    {
      "id": "40ecabae-9541-443c-b6c7-a55fc091dc5f",
      "parentId": "be0d9484-5f61-40f4-befb-8563c15bd9fd",
      "resourceType": "Flow"
    },
    {
      "id": "e1e9c233-2eca-4035-882e-39401a0ac574",
      "parentId": "107c6117-4f62-47c1-9587-9ba601cf8f12",
      "resourceType": "InboundEndpoint",
      "title": "update timers"
    },
    {
      "id": "7fcd38ef-9759-41d1-badc-e4f606a0275a",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "track"
    },
    {
      "id": "e3999b84-731b-4a1e-ae60-6ef7852c4dbe",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "3de4e10f-c6a7-495b-b8b7-d78796d49466",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "209f6036-dafa-42bf-a080-d5ad9d85cb0c",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "playlist-snapshot"
    },
    {
      "id": "e1659ef9-1835-4945-9c4f-392f879fb9c7",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "f4a7bfbf-90a3-47c6-9512-6a35a0c2e92c",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpPathItem"
    },
    {
      "id": "5ff7c0c2-4020-48a4-94ed-273fa307f27c",
      "resourceType": "DataGroup",
      "title": "simulated_positions"
    },
    {
      "id": "11531c17-809a-43f8-b9fe-21a166bae674",
      "parentId": "10ad4631-89c1-41c0-8e66-a3152ef5fee7",
      "resourceType": "Test",
      "title": "default-test-input"
    },
    {
      "id": "d3114a88-4bcf-4ff9-9ced-99aa8f41317b",
      "parentId": "5e997f90-5507-465b-9101-3deafed495da",
      "resourceType": "SchemaHttpSchema",
      "title": "artist"
    },
    {
      "id": "e2dbe48a-7479-4dbe-8dc2-34e5dc6f4dd8",
      "parentId": "7332525c-145f-411d-8475-c7bb2d51d571",
      "resourceType": "Test",
      "title": "default-test-input"
    },
    {
      "id": "b4921bd2-9a2c-40f0-910c-745eff6871d3",
      "parentId": "65376f4b-dd5c-495e-9b46-7451c42d3722",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /users/{user_id}/playlists/{playlist_id}"
    },
    {
      "id": "4f1dc290-0f2f-4a7c-8967-b02c4ea07889",
      "parentId": "ac3aa7f9-602a-4305-81e6-6748685c77ec",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /users/{user_id}/playlists"
    },
    {
      "id": "eac07f66-5510-4597-976f-4fb919b0f6cb",
      "parentId": "e1659ef9-1835-4945-9c4f-392f879fb9c7",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /artists/{id}/related-artists"
    },
    {
      "id": "ecf69165-ea23-4a26-8fbf-17c367b982a8",
      "parentId": "58479126-9787-4143-bbac-c28ea4903425",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /artists/{id}/albums"
    },
    {
      "id": "be88a07a-a031-49d9-8063-78e6da5b5687",
      "parentId": "3de4e10f-c6a7-495b-b8b7-d78796d49466",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /albums/{id}/tracks"
    },
    {
      "id": "a5f4446e-61c0-4121-bd0a-5ba4bfd84726",
      "parentId": "05de7a66-091f-426d-84b5-cdd5910fb055",
      "resourceType": "SchemaHttpOperation",
      "title": "GET /browse/featured-playlists"
    }
  ],
  "Schema": [
    {
      "add-on-img": "https://objectstorage.us-phoenix-1.oraclecloud.com/n/axdlmmrmhtza/b/connector-images/o/spotify.png",
      "add-on-title": "Spotify",
      "add-on-version": "v1",
      "add-on-website": "spotify.com",
      "consumes": [
        "application/json"
      ],
      "externalDocs": {
        "url": "https://developer.spotify.com/"
      },
      "id": "5e997f90-5507-465b-9101-3deafed495da",
      "info": {
        "title": "Spotify",
        "version": "v1",
        "x-apisguru-categories": [
          "media"
        ],
        "x-logo": {
          "url": "https://logo-core.clearbit.com/spotify.com"
        },
        "x-origin": [
          {
            "format": "raml",
            "url": "https://raw.githubusercontent.com/spotify/web-api/master/specifications/raml/api.raml",
            "version": "0.8"
          }
        ],
        "x-providerName": "spotify.com"
      },
      "produces": [
        "application/json"
      ],
      "servers": [
        {
          "url": "https://api.spotify.com/v1"
        }
      ],
      "type": "HTTP"
    }
  ],
  "SchemaHttpOauth": [
    {
      "id": "12d6607e-d9fe-44c0-a2e9-a52783dc82f1",
      "server": "https://accounts.spotify.com/authorize"
    }
  ],
  "SchemaHttpOperation": [
    {
      "description": "[Create a Playlist](https://developer.spotify.com/web-api/create-playlist/)\n",
      "id": "62a42f48-4618-4c73-92a3-cdede8ba5351",
      "method": "post",
      "operationId": "POST /users/{user_id}/playlists",
      "parameters": [
        {
          "description": "The user's Spotify user ID.",
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "It is used to set specified media type.",
          "in": "header",
          "name": "Accept",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "content": {
          "application/json": {
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "public": {
                  "type": "boolean"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        },
        "description": "",
        "required": true
      },
      "responses": {
        "201": {
          "description": "Created",
          "schema": {
            "$ref": "bec2b851-2f84-45d2-9f61-4d18a7fbf850"
          }
        },
        "429": {
          "description": "API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.\n"
        }
      }
    },
    {
      "description": "[Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/)\n",
      "id": "3ec76929-40cd-4d2e-994c-6f384c53d0c9",
      "method": "put",
      "operationId": "PUT /me/tracks",
      "parameters": [
        {
          "description": "A comma-separated list of IDs",
          "in": "query",
          "name": "ids",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "It is used to set specified media type.",
          "in": "header",
          "name": "Accept",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK"
        },
        "429": {
          "description": "API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.\n"
        }
      }
    },
    {
      "description": "[Check if Current User Follows Artists or Users](https://developer.spotify.com/web-api/check-current-user-follows/)\n",
      "id": "e567a628-7940-4bd9-9963-50c9aa2f395e",
      "method": "get",
      "operationId": "GET /me/following/contains",
      "parameters": [
        {
          "description": "The type to follow.",
          "in": "query",
          "name": "type",
          "required": true,
          "schema": {
            "enum": [
              "artist",
              "user"
            ],
            "type": "string"
          }
        },
        {
          "description": "A comma-separated string of the artists or users ids.",
          "in": "query",
          "name": "ids",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "items": {
              "description": "True if the user follows the artist/user, false otherwise",
              "type": "boolean"
            },
            "type": "array"
          }
        }
      }
    },
    {
      "description": "[Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/)\n",
      "id": "03f74efb-ad80-4a10-83de-7672c06ae4e9",
      "method": "put",
      "operationId": "PUT /users/{user_id}/playlists/{playlist_id}",
      "parameters": [
        {
          "description": "The user's Spotify user ID.",
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The Spotify playlist ID.",
          "in": "path",
          "name": "playlist_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "It is used to set specified media type.",
          "in": "header",
          "name": "Accept",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "content": {
          "application/json": {
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "public": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "",
        "required": true
      },
      "responses": {
        "200": {
          "description": "OK"
        },
        "429": {
          "description": "API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.\n"
        }
      }
    },
    {
      "description": "[Reorder or replace a Playlist's Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/)\n",
      "id": "6b664c8f-01ba-4404-a603-407661cae036",
      "method": "put",
      "operationId": "PUT /users/{user_id}/playlists/{playlist_id}/tracks",
      "parameters": [
        {
          "description": "The user's Spotify user ID.",
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The Spotify playlist ID.",
          "in": "path",
          "name": "playlist_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "It is used to set specified media type.",
          "in": "header",
          "name": "Accept",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "content": {
          "application/json": {
            "required": true,
            "schema": {
              "properties": {
                "uris": {
                  "items": {},
                  "type": "array"
                }
              },
              "required": [
                "uris"
              ],
              "type": "object"
            }
          }
        },
        "description": "",
        "required": true
      },
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "209f6036-dafa-42bf-a080-d5ad9d85cb0c"
          }
        },
        "429": {
          "description": "API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.\n"
        }
      }
    },
    {
      "description": "[Get an Album](https://developer.spotify.com/web-api/get-album/)\n",
      "id": "80c5e6d2-5770-40a5-9d9a-6e8bb5520d95",
      "method": "get",
      "operationId": "GET /albums/{id}",
      "parameters": [
        {
          "description": "The Spotify ID for the album",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The market (an ISO 3166-1 alpha-2 country code)",
          "in": "query",
          "name": "market",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "6c8243e5-86ef-423a-ad93-8759aafad983"
          }
        }
      }
    },
    {
      "description": "[Get User's Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/)\n",
      "id": "2d3213c8-0aea-4247-be38-d2f75a0f4b1d",
      "method": "get",
      "operationId": "GET /me/following",
      "parameters": [
        {
          "description": "The ID type, currently only artist is supported.",
          "in": "query",
          "name": "type",
          "required": true,
          "schema": {
            "enum": [
              "artist"
            ],
            "type": "string"
          }
        },
        {
          "description": "The maximum number of items to return",
          "in": "query",
          "name": "limit",
          "required": false,
          "schema": {
            "default": 20,
            "maximum": 50,
            "minimum": 0,
            "type": "integer"
          }
        },
        {
          "description": "The last artist ID retrieved from the previous request.",
          "in": "query",
          "name": "after",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "5f8e6174-2e56-4ad9-b122-a2d09366e55b"
          }
        }
      }
    },
    {
      "description": "[Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/)\n",
      "id": "ef67839f-5c98-43d4-ac4d-ef384463b6ad",
      "method": "get",
      "operationId": "GET /users/{user_id}/playlists/{playlist_id}/followers/contains",
      "parameters": [
        {
          "description": "The user's Spotify user ID.",
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The Spotify playlist ID.",
          "in": "path",
          "name": "playlist_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "A comma-separated list of users ids",
          "in": "query",
          "name": "ids",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "items": {
              "description": "True if the user follows the playlist, false otherwise",
              "type": "boolean"
            },
            "type": "array"
          }
        }
      }
    },
    {
      "description": "[Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/)\n",
      "id": "8d57b13c-e39f-4a6c-b6f5-dad96d8ae953",
      "method": "put",
      "operationId": "PUT /users/{user_id}/playlists/{playlist_id}/followers",
      "parameters": [
        {
          "description": "The user's Spotify user ID.",
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The Spotify playlist ID.",
          "in": "path",
          "name": "playlist_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "content": {
          "application/json": {
            "required": true,
            "schema": {
              "properties": {
                "public": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "",
        "required": true
      },
      "responses": {
        "200": {
          "description": "OK"
        }
      }
    },
    {
      "description": "[Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/)\n",
      "id": "7244241a-97c1-4fec-a89c-a972ba9d44f6",
      "method": "get",
      "operationId": "GET /browse/new-releases",
      "parameters": [
        {
          "description": "The maximum number of items to return",
          "in": "query",
          "name": "limit",
          "required": false,
          "schema": {
            "default": 20,
            "maximum": 50,
            "minimum": 0,
            "type": "integer"
          }
        },
        {
          "description": "The index of the first item to return",
          "in": "query",
          "name": "offset",
          "required": false,
          "schema": {
            "default": 0,
            "type": "integer"
          }
        },
        {
          "description": "The country (an ISO 3166-1 alpha-2 country code)",
          "in": "query",
          "name": "country",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "It is used to set specified media type.",
          "in": "header",
          "name": "Accept",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "b5d3cb16-7ff0-4ad9-9b90-83816c144629"
          }
        },
        "429": {
          "description": "API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.\n"
        }
      }
    },
    {
      "description": "[Get a Category's playlists](https://developer.spotify.com/web-api/get-categorys-playlists/)\n",
      "id": "86bc1097-6c04-46e0-8ae7-fbbdaa8f2f59",
      "method": "get",
      "operationId": "GET /browse/categories/{category_id}/playlists",
      "parameters": [
        {
          "description": "The Spotify ID of the category you wish to fetch.",
          "in": "path",
          "name": "category_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The maximum number of items to return",
          "in": "query",
          "name": "limit",
          "required": false,
          "schema": {
            "default": 20,
            "maximum": 50,
            "minimum": 0,
            "type": "integer"
          }
        },
        {
          "description": "The index of the first item to return",
          "in": "query",
          "name": "offset",
          "required": false,
          "schema": {
            "default": 0,
            "type": "integer"
          }
        },
        {
          "description": "The country (an ISO 3166-1 alpha-2 country code)",
          "in": "query",
          "name": "country",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "It is used to set specified media type.",
          "in": "header",
          "name": "Accept",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "properties": {
              "playlists": {
                "$ref": "6e1bf70f-1537-4843-b186-810e96a11a63"
              }
            },
            "type": "object"
          }
        },
        "429": {
          "description": "API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.\n"
        }
      }
    },
    {
      "description": "[Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/)\n",
      "id": "f7028183-86e1-4808-86f4-675eedc3af48",
      "method": "delete",
      "operationId": "DELETE /me/following",
      "parameters": [
        {
          "description": "The type to unfollow.",
          "in": "query",
          "name": "type",
          "required": true,
          "schema": {
            "enum": [
              "artist",
              "user"
            ],
            "type": "string"
          }
        },
        {
          "description": "A comma-separated list of the artists or users ids",
          "in": "query",
          "name": "ids",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No Content"
        }
      }
    },
    {
      "description": "[Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/)\n",
      "id": "89452de0-2028-47f7-a349-e5d6e0e90a31",
      "method": "get",
      "operationId": "GET /artists/{id}/top-tracks",
      "parameters": [
        {
          "description": "The Spotify ID for the artist",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The country (an ISO 3166-1 alpha-2 country code)",
          "in": "query",
          "name": "country",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "properties": {
              "tracks": {
                "items": {
                  "$ref": "7fcd38ef-9759-41d1-badc-e4f606a0275a"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        }
      }
    },
    {
      "description": "[Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/)\n",
      "id": "09ccee56-8762-4012-962b-6f0f62f591c4",
      "method": "post",
      "operationId": "POST /users/{user_id}/playlists/{playlist_id}/tracks",
      "parameters": [
        {
          "description": "The user's Spotify user ID.",
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The Spotify playlist ID.",
          "in": "path",
          "name": "playlist_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The position to insert the tracks, a zero-based index",
          "in": "query",
          "name": "position",
          "required": false,
          "schema": {
            "type": "integer"
          }
        },
        {
          "description": "A comma-separated list of Spotify track URIs to add. A maximum of 100 tracks can be added in one request.",
          "in": "query",
          "name": "uris",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "It is used to set specified media type.",
          "in": "header",
          "name": "Accept",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "209f6036-dafa-42bf-a080-d5ad9d85cb0c"
          }
        },
        "429": {
          "description": "API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.\n"
        }
      }
    },
    {
      "description": "[Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/)\n",
      "id": "52919371-e0b4-41be-ba50-4bf93382bc00",
      "method": "get",
      "operationId": "GET /users/{user_id}/playlists/{playlist_id}/tracks",
      "parameters": [
        {
          "description": "The user's Spotify user ID.",
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The Spotify playlist ID.",
          "in": "path",
          "name": "playlist_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The maximum number of items to return",
          "in": "query",
          "name": "limit",
          "required": false,
          "schema": {
            "default": 20,
            "maximum": 50,
            "minimum": 0,
            "type": "integer"
          }
        },
        {
          "description": "The index of the first item to return",
          "in": "query",
          "name": "offset",
          "required": false,
          "schema": {
            "default": 0,
            "type": "integer"
          }
        },
        {
          "description": "A comma-separated list of fields to filter query",
          "in": "query",
          "name": "fields",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The market (an ISO 3166-1 alpha-2 country code)",
          "in": "query",
          "name": "market",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "It is used to set specified media type.",
          "in": "header",
          "name": "Accept",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "4364b02d-016a-4654-b34e-d4a0d4b3ffd9"
          }
        },
        "429": {
          "description": "API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.\n"
        }
      }
    },
    {
      "description": "[Get a Single Browse Category](https://developer.spotify.com/web-api/get-category/)\n",
      "id": "037aa9cb-8140-4064-a4ef-3e4df1d39f77",
      "method": "get",
      "operationId": "GET /browse/categories/{category_id}",
      "parameters": [
        {
          "description": "The Spotify ID of the category you wish to fetch.",
          "in": "path",
          "name": "category_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The country (an ISO 3166-1 alpha-2 country code)",
          "in": "query",
          "name": "country",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \"Spanish (Mexico)\".\n",
          "in": "query",
          "name": "locale",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "It is used to set specified media type.",
          "in": "header",
          "name": "Accept",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "114ba8f6-8c40-48f3-900c-be5b6c3893a7"
          }
        },
        "429": {
          "description": "API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.\n"
        }
      }
    },
    {
      "description": "[Get a List of Browse Categories](https://developer.spotify.com/web-api/get-list-categories/)\n",
      "id": "86cc86a8-dd7f-4a2f-9bda-e9df7e9e996b",
      "method": "get",
      "operationId": "GET /browse/categories",
      "parameters": [
        {
          "description": "The maximum number of items to return",
          "in": "query",
          "name": "limit",
          "required": false,
          "schema": {
            "default": 20,
            "maximum": 50,
            "minimum": 0,
            "type": "integer"
          }
        },
        {
          "description": "The index of the first item to return",
          "in": "query",
          "name": "offset",
          "required": false,
          "schema": {
            "default": 0,
            "type": "integer"
          }
        },
        {
          "description": "The country (an ISO 3166-1 alpha-2 country code)",
          "in": "query",
          "name": "country",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \"Spanish (Mexico)\".\n",
          "in": "query",
          "name": "locale",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "It is used to set specified media type.",
          "in": "header",
          "name": "Accept",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "e892c7c3-5288-4bec-8499-fb5f5a66d970"
          }
        },
        "429": {
          "description": "API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.\n"
        }
      }
    },
    {
      "description": "[Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/)\n",
      "id": "8afbbfd7-0bf6-4ec2-9001-1c05b790d755",
      "method": "get",
      "operationId": "GET /artists",
      "parameters": [
        {
          "description": "A comma-separated list of IDs",
          "in": "query",
          "name": "ids",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "properties": {
              "artists": {
                "items": {
                  "$ref": "d3114a88-4bcf-4ff9-9ced-99aa8f41317b"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        }
      }
    },
    {
      "description": "[Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/)\n",
      "id": "64fc9caa-5f8c-42b6-9c6c-856dc7b40d85",
      "method": "get",
      "operationId": "GET /me/tracks",
      "parameters": [
        {
          "description": "The maximum number of items to return",
          "in": "query",
          "name": "limit",
          "required": false,
          "schema": {
            "default": 20,
            "maximum": 50,
            "minimum": 0,
            "type": "integer"
          }
        },
        {
          "description": "The index of the first item to return",
          "in": "query",
          "name": "offset",
          "required": false,
          "schema": {
            "default": 0,
            "type": "integer"
          }
        },
        {
          "description": "The market (an ISO 3166-1 alpha-2 country code)",
          "in": "query",
          "name": "market",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "It is used to set specified media type.",
          "in": "header",
          "name": "Accept",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "bdb9fc44-c171-42ac-9a74-196905d35851"
          }
        },
        "429": {
          "description": "API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.\n"
        }
      }
    },
    {
      "description": "[Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/)\n",
      "id": "a70f5984-713c-45f8-a8c0-b6765d20b020",
      "method": "delete",
      "operationId": "DELETE /me/tracks",
      "parameters": [
        {
          "description": "A comma-separated list of IDs",
          "in": "query",
          "name": "ids",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "It is used to set specified media type.",
          "in": "header",
          "name": "Accept",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK"
        },
        "429": {
          "description": "API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.\n"
        }
      }
    },
    {
      "description": "[Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/)\n",
      "id": "235cb407-c610-4893-9587-8b0345225129",
      "method": "put",
      "operationId": "PUT /me/following",
      "parameters": [
        {
          "description": "The type to follow.",
          "in": "query",
          "name": "type",
          "required": true,
          "schema": {
            "enum": [
              "artist",
              "user"
            ],
            "type": "string"
          }
        },
        {
          "description": "A comma-separated list of the artists or users ids",
          "in": "query",
          "name": "ids",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "No Content"
        }
      }
    },
    {
      "description": "[Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/)\n",
      "id": "00f7484f-04be-483d-a64e-277cf8f042dd",
      "method": "get",
      "operationId": "GET /users/{user_id}",
      "parameters": [
        {
          "description": "The user's Spotify user ID.",
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "b4d326d5-5457-48d6-a682-af595306343f"
          }
        }
      }
    },
    {
      "description": "[Search for an Item](https://developer.spotify.com/web-api/search-item/)\n",
      "id": "eda97ea4-f2df-4d11-aa81-e2375223a32b",
      "method": "get",
      "operationId": "GET /search",
      "parameters": [
        {
          "description": "The maximum number of items to return",
          "in": "query",
          "name": "limit",
          "required": false,
          "schema": {
            "default": 20,
            "maximum": 50,
            "minimum": 0,
            "type": "integer"
          }
        },
        {
          "description": "The index of the first item to return",
          "in": "query",
          "name": "offset",
          "required": false,
          "schema": {
            "default": 0,
            "type": "integer"
          }
        },
        {
          "description": "The search query's keywords (and optional field filters). The search is not case-sensitive: 'roadhouse' will match 'Roadhouse', 'roadHouse', etc. Keywords will be matched in any order unless surrounded by quotes, thus q=roadhouse&20blues will match both 'Blues Roadhouse' and 'Roadhouse of the Blues'. Quotation marks can be used to limit the match to a phrase: q=roadhouse&20blues will match 'My Roadhouse Blues' but not 'Roadhouse of the Blues'. By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an album, artist or track field filter. For example q=album:gold%20artist:abba&type=album will search for albums with the text 'gold' in the album name and the text 'abba' in an artist name. Other possible field filters, depending on object types being searched, include year, genre, upc, and isrc. For example, q=damian%20genre:reggae-pop&type=artist. The asterisk (*) character can, with some limitations, be used as a wildcard (maximum: 2 per query). It will match a variable number of non-white-space characters. It cannot be used in a quoted phrase, in a field filter, or as the first character of the keyword string. Searching for playlists will return results matching the playlist's name and/or description.",
          "in": "query",
          "name": "q",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "A comma-separated list of item types to search across. Search results will include hits from all the specified item types; for example q=name:abacab&type=album,track will return both albums and tracks with \"abacab\" in their name.",
          "in": "query",
          "name": "type",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The market (an ISO 3166-1 alpha-2 country code).  If given, only items with content playable in that market will be returned.",
          "in": "query",
          "name": "market",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "048a126e-c9b8-4d24-a32d-dcaf716e6823"
          }
        }
      }
    },
    {
      "description": "[Get an Artist](https://developer.spotify.com/web-api/get-artist/)\n",
      "id": "62ce036d-f5ef-494e-afcc-b821c19bf8a3",
      "method": "get",
      "operationId": "GET /artists/{id}",
      "parameters": [
        {
          "description": "The Spotify ID for the artist",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "d3114a88-4bcf-4ff9-9ced-99aa8f41317b"
          }
        }
      }
    },
    {
      "description": "[Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/)\n",
      "id": "301e96a9-82b5-4b80-b2ba-eb796f6dce8b",
      "method": "get",
      "operationId": "GET /me",
      "parameters": [],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "dd623aaf-7195-495c-9f22-eb3be5d92f1f"
          }
        }
      }
    },
    {
      "description": "[Get a Track](https://developer.spotify.com/web-api/get-track/)\n",
      "id": "afcb26a0-b37c-41db-8ad4-85c3593af13f",
      "method": "get",
      "operationId": "GET /tracks/{id}",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The market (an ISO 3166-1 alpha-2 country code)",
          "in": "query",
          "name": "market",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "7fcd38ef-9759-41d1-badc-e4f606a0275a"
          }
        }
      }
    },
    {
      "description": "[Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/)\n",
      "id": "c2ba71a7-36cc-4f45-8746-fb422008d8df",
      "method": "get",
      "operationId": "GET /tracks",
      "parameters": [
        {
          "description": "A comma-separated list of IDs",
          "in": "query",
          "name": "ids",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The market (an ISO 3166-1 alpha-2 country code)",
          "in": "query",
          "name": "market",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "properties": {
              "tracks": {
                "items": {
                  "$ref": "7fcd38ef-9759-41d1-badc-e4f606a0275a"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        }
      }
    },
    {
      "description": "[Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/)\n",
      "id": "8c35253b-49d8-498e-92f1-79954d8cb2ab",
      "method": "delete",
      "operationId": "DELETE /users/{user_id}/playlists/{playlist_id}/followers",
      "parameters": [
        {
          "description": "The user's Spotify user ID.",
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The Spotify playlist ID.",
          "in": "path",
          "name": "playlist_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK"
        }
      }
    },
    {
      "description": "[Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/)\n",
      "id": "b4a83b39-196c-468a-a257-c2d854d5aa96",
      "method": "delete",
      "operationId": "DELETE /users/{user_id}/playlists/{playlist_id}/tracks",
      "parameters": [
        {
          "description": "The user's Spotify user ID.",
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The Spotify playlist ID.",
          "in": "path",
          "name": "playlist_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "It is used to set specified media type.",
          "in": "header",
          "name": "Accept",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "content": {
          "application/json": {
            "required": true,
            "schema": {
              "properties": {
                "tracks": {
                  "items": {},
                  "type": "array"
                }
              },
              "required": [
                "tracks"
              ],
              "type": "object"
            }
          }
        },
        "description": "",
        "required": true
      },
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "209f6036-dafa-42bf-a080-d5ad9d85cb0c"
          }
        },
        "429": {
          "description": "API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.\n"
        }
      }
    },
    {
      "description": "[Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/)\n",
      "id": "5d125274-9645-4e3d-9610-5982e7ffc156",
      "method": "get",
      "operationId": "GET /albums",
      "parameters": [
        {
          "description": "A comma-separated list of IDs",
          "in": "query",
          "name": "ids",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The market (an ISO 3166-1 alpha-2 country code)",
          "in": "query",
          "name": "market",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "properties": {
              "albums": {
                "items": {
                  "$ref": "6c8243e5-86ef-423a-ad93-8759aafad983"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        }
      }
    },
    {
      "description": "[Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/)\n",
      "id": "8f0b460a-3807-4078-a061-6ee8e9fc9635",
      "method": "get",
      "operationId": "GET /me/tracks/contains",
      "parameters": [
        {
          "description": "A comma-separated list of IDs",
          "in": "query",
          "name": "ids",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "items": {
              "description": "True if the track is in user's Your Music library, false otherwise",
              "type": "boolean"
            },
            "type": "array"
          }
        }
      }
    },
    {
      "description": "[Get a Playlist](https://developer.spotify.com/web-api/get-playlist/)\n",
      "id": "b4921bd2-9a2c-40f0-910c-745eff6871d3",
      "method": "get",
      "operationId": "GET /users/{user_id}/playlists/{playlist_id}",
      "parameters": [
        {
          "description": "The user's Spotify user ID.",
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The Spotify playlist ID.",
          "in": "path",
          "name": "playlist_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "A comma-separated list of fields to filter query",
          "in": "query",
          "name": "fields",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The market (an ISO 3166-1 alpha-2 country code)",
          "in": "query",
          "name": "market",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "It is used to set specified media type.",
          "in": "header",
          "name": "Accept",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "bec2b851-2f84-45d2-9f61-4d18a7fbf850"
          }
        },
        "429": {
          "description": "API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.\n"
        }
      }
    },
    {
      "description": "[Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/)\n",
      "id": "4f1dc290-0f2f-4a7c-8967-b02c4ea07889",
      "method": "get",
      "operationId": "GET /users/{user_id}/playlists",
      "parameters": [
        {
          "description": "The user's Spotify user ID.",
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The maximum number of items to return",
          "in": "query",
          "name": "limit",
          "required": false,
          "schema": {
            "default": 20,
            "maximum": 50,
            "minimum": 0,
            "type": "integer"
          }
        },
        {
          "description": "The index of the first item to return",
          "in": "query",
          "name": "offset",
          "required": false,
          "schema": {
            "default": 0,
            "type": "integer"
          }
        },
        {
          "description": "It is used to set specified media type.",
          "in": "header",
          "name": "Accept",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "6e1bf70f-1537-4843-b186-810e96a11a63"
          }
        },
        "429": {
          "description": "API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.\n"
        }
      }
    },
    {
      "description": "[Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/)\n",
      "id": "eac07f66-5510-4597-976f-4fb919b0f6cb",
      "method": "get",
      "operationId": "GET /artists/{id}/related-artists",
      "parameters": [
        {
          "description": "The Spotify ID for the artist",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "properties": {
              "artists": {
                "items": {
                  "$ref": "d3114a88-4bcf-4ff9-9ced-99aa8f41317b"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        }
      }
    },
    {
      "description": "[Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/)\n",
      "id": "ecf69165-ea23-4a26-8fbf-17c367b982a8",
      "method": "get",
      "operationId": "GET /artists/{id}/albums",
      "parameters": [
        {
          "description": "The Spotify ID for the artist",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The maximum number of items to return",
          "in": "query",
          "name": "limit",
          "required": false,
          "schema": {
            "default": 20,
            "maximum": 50,
            "minimum": 0,
            "type": "integer"
          }
        },
        {
          "description": "The index of the first item to return",
          "in": "query",
          "name": "offset",
          "required": false,
          "schema": {
            "default": 0,
            "type": "integer"
          }
        },
        {
          "description": "Filter by album types",
          "in": "query",
          "name": "album_type",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The market (an ISO 3166-1 alpha-2 country code)",
          "in": "query",
          "name": "market",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "b5d3cb16-7ff0-4ad9-9b90-83816c144629"
          }
        }
      }
    },
    {
      "description": "[Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/)\n",
      "id": "be88a07a-a031-49d9-8063-78e6da5b5687",
      "method": "get",
      "operationId": "GET /albums/{id}/tracks",
      "parameters": [
        {
          "description": "The Spotify ID for the album",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The maximum number of items to return",
          "in": "query",
          "name": "limit",
          "required": false,
          "schema": {
            "default": 20,
            "maximum": 50,
            "minimum": 0,
            "type": "integer"
          }
        },
        {
          "description": "The index of the first item to return",
          "in": "query",
          "name": "offset",
          "required": false,
          "schema": {
            "default": 0,
            "type": "integer"
          }
        },
        {
          "description": "The market (an ISO 3166-1 alpha-2 country code)",
          "in": "query",
          "name": "market",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "9681ddba-3089-499e-8eb1-30036c65b84e"
          }
        }
      }
    },
    {
      "description": "[Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/)\n",
      "id": "a5f4446e-61c0-4121-bd0a-5ba4bfd84726",
      "method": "get",
      "operationId": "GET /browse/featured-playlists",
      "parameters": [
        {
          "description": "The maximum number of items to return",
          "in": "query",
          "name": "limit",
          "required": false,
          "schema": {
            "default": 20,
            "maximum": 50,
            "minimum": 0,
            "type": "integer"
          }
        },
        {
          "description": "The index of the first item to return",
          "in": "query",
          "name": "offset",
          "required": false,
          "schema": {
            "default": 0,
            "type": "integer"
          }
        },
        {
          "description": "The country (an ISO 3166-1 alpha-2 country code)",
          "in": "query",
          "name": "country",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \"Spanish (Mexico)\".\n",
          "in": "query",
          "name": "locale",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "A timestamp in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss) with the user's local time to get results tailored to a specific date and time in the day. If not provided, it defaults to the current UTC time. Example: \"2014-10-23T09:00:00\" for a user whose local time is 9AM.\n",
          "in": "query",
          "name": "timestamp",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "It is used to set specified media type.",
          "in": "header",
          "name": "Accept",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "b1482406-06f1-4c9c-ac5d-a134eb093ce3"
          }
        },
        "429": {
          "description": "API rate limit exceeded. See http://developer.spotify.com/web-api/user-guide/#rate-limiting for details.\n"
        }
      }
    }
  ],
  "SchemaHttpPathItem": [
    {
      "id": "05de7a66-091f-426d-84b5-cdd5910fb055",
      "path": "/browse/featured-playlists"
    },
    {
      "id": "7ed6c91f-c0ef-432d-bf9b-c5bdb5f41057",
      "path": "/users/{user_id}/playlists/{playlist_id}/followers"
    },
    {
      "id": "14fa15e0-48f9-4803-9339-78713508bf08",
      "path": "/browse/new-releases"
    },
    {
      "id": "4da5f239-275f-4795-a1d3-2b2daacf56fd",
      "path": "/me/following/contains"
    },
    {
      "id": "63a1391f-ad07-4727-b173-574410a362b4",
      "path": "/artists/{id}"
    },
    {
      "id": "7a607ba2-2cf2-4d1d-a352-31a4eadd8d5d",
      "path": "/albums/{id}"
    },
    {
      "id": "e3f896ad-05fe-43bf-bc49-de124045c514",
      "path": "/albums"
    },
    {
      "id": "ac3aa7f9-602a-4305-81e6-6748685c77ec",
      "path": "/users/{user_id}/playlists"
    },
    {
      "id": "12a6e06d-506c-49a9-90e2-82edf1cd6104",
      "path": "/browse/categories"
    },
    {
      "id": "65376f4b-dd5c-495e-9b46-7451c42d3722",
      "path": "/users/{user_id}/playlists/{playlist_id}"
    },
    {
      "id": "4c9b85ca-389d-472f-a2aa-4d4d7d77842c",
      "path": "/search"
    },
    {
      "id": "683fa548-978e-47d1-9e82-cdb0aa51d1b1",
      "path": "/me/tracks"
    },
    {
      "id": "9c3b88f0-1d33-4047-bdd5-b1c67025642d",
      "path": "/browse/categories/{category_id}"
    },
    {
      "id": "58479126-9787-4143-bbac-c28ea4903425",
      "path": "/artists/{id}/albums"
    },
    {
      "id": "91f91a57-bbc2-4105-a2d8-6568519dad80",
      "path": "/me/tracks/contains"
    },
    {
      "id": "34f4fb48-935a-4bc3-bdde-f7442b956143",
      "path": "/tracks/{id}"
    },
    {
      "id": "013b7c5c-e722-42a2-81f3-5ca5f7c5ab6a",
      "path": "/me"
    },
    {
      "id": "32a7730b-1bca-4f9c-92cd-4b66271e34ac",
      "path": "/users/{user_id}/playlists/{playlist_id}/tracks"
    },
    {
      "id": "e11152c7-e36b-4b84-9d67-18e48d439de3",
      "path": "/users/{user_id}"
    },
    {
      "id": "188f91f1-8aea-490c-8373-fa263dabc876",
      "path": "/me/following"
    },
    {
      "id": "6338d7d9-4e68-45a3-a24b-8535a02075ad",
      "path": "/tracks"
    },
    {
      "id": "07c2e483-26ed-4e93-9f5a-d0c264ab30ea",
      "path": "/artists/{id}/top-tracks"
    },
    {
      "id": "3ab5b8ca-a0f2-4404-8491-0bdf6b59430f",
      "path": "/users/{user_id}/playlists/{playlist_id}/followers/contains"
    },
    {
      "id": "e3999b84-731b-4a1e-ae60-6ef7852c4dbe",
      "path": "/artists"
    },
    {
      "id": "3de4e10f-c6a7-495b-b8b7-d78796d49466",
      "path": "/albums/{id}/tracks"
    },
    {
      "id": "e1659ef9-1835-4945-9c4f-392f879fb9c7",
      "path": "/artists/{id}/related-artists"
    },
    {
      "id": "f4a7bfbf-90a3-47c6-9512-6a35a0c2e92c",
      "path": "/browse/categories/{category_id}/playlists"
    }
  ],
  "SchemaHttpSchema": [
    {
      "id": "38b7b3e7-82c1-4cf3-9fb6-90a5938c39cf",
      "properties": {
        "collaborative": {
          "description": "True if the owner allows other users to modify the playlist.",
          "type": "boolean"
        },
        "external_urls": {
          "additionalProperties": {
            "description": "The type of the URL, for example: 'spotify' - The Spotify URL for the object.",
            "type": "string"
          },
          "description": "Known external URLs for this album.",
          "type": "object"
        },
        "href": {
          "description": "A link to the Web API endpoint providing full details of the playlist.",
          "type": "string"
        },
        "id": {
          "description": "The Spotify ID of the playlist.",
          "type": "string"
        },
        "images": {
          "description": "The cover art for the album in various sizes, widest first.",
          "items": {
            "$ref": "0b90746f-5776-4fa0-b050-8aee9c02505a"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the playlist.",
          "type": "string"
        },
        "owner": {
          "$ref": "b4d326d5-5457-48d6-a682-af595306343f"
        },
        "public": {
          "description": "The playlist's public/private status: true the playlist is public, false the playlist is private, null the playlist status is not relevant. For more about public/private status, see Working with Playlists.",
          "type": "boolean"
        },
        "snapshot_id": {
          "description": "The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version",
          "type": "string"
        },
        "tracks": {
          "properties": {
            "href": {
              "description": "A link to the Web API endpoint returning the full result of the request.",
              "type": "string"
            },
            "total": {
              "description": "The total number of tracks available to return.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "type": {
          "description": "The object type: 'playlist'.",
          "type": "string"
        },
        "uri": {
          "description": "Spotify URI of the playlist.",
          "type": "string"
        }
      },
      "type": "object"
    },
    {
      "id": "5f8e6174-2e56-4ad9-b122-a2d09366e55b",
      "properties": {
        "artists": {
          "description": "Present if the type of followe items is 'artist'.",
          "properties": {
            "cursor": {
              "description": "The cursors used to find the next set of items.",
              "properties": {
                "after": {
                  "description": "The cursor to use as key to find the next page of items.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "href": {
              "description": "A link to the Web API endpoint returning the full result of the request.",
              "type": "string"
            },
            "items": {
              "description": "The requested data.",
              "items": {
                "$ref": "d3114a88-4bcf-4ff9-9ced-99aa8f41317b"
              },
              "type": "array"
            },
            "limit": {
              "description": "The maximum number of items in the response (as set in the query or by default).",
              "type": "integer"
            },
            "next": {
              "description": "URL to the next page of items. (null if none)",
              "type": "string"
            },
            "total": {
              "description": "The total number of items available to return.",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    {
      "id": "b1482406-06f1-4c9c-ac5d-a134eb093ce3",
      "properties": {
        "message": {
          "description": "A sentence describing the context for the featured playlists.",
          "type": "string"
        },
        "playlists": {
          "$ref": "6e1bf70f-1537-4843-b186-810e96a11a63"
        }
      },
      "type": "object"
    },
    {
      "id": "993f9d90-0ea3-4ef9-b6d0-0d9487d57bc0",
      "properties": {
        "external_urls": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Known external URLs for this artist.",
          "type": "object"
        },
        "href": {
          "description": "A link to the Web API endpoint providing full details of the artist.",
          "type": "string"
        },
        "id": {
          "description": "The Spotify ID for the artist.",
          "type": "string"
        },
        "name": {
          "description": "The name of the artist.",
          "type": "string"
        },
        "type": {
          "description": "The object type: 'artist'",
          "type": "string"
        },
        "uri": {
          "description": "The Spotify URI for the artist.",
          "type": "string"
        }
      },
      "type": "object"
    },
    {
      "id": "b730129e-1c04-4c47-9248-29d1bf178b9b",
      "properties": {
        "added_at": {
          "description": "The date and time the track was added in ISO 8601 format. Note that some very old playlists may return null in this field.",
          "type": "string"
        },
        "track": {
          "$ref": "7fcd38ef-9759-41d1-badc-e4f606a0275a"
        }
      },
      "type": "object"
    },
    {
      "id": "7a5d3152-3eed-4677-b357-2be7e5713706",
      "properties": {
        "added_at": {
          "description": "The date and time the track was added in ISO 8601 format. Note that some very old playlists may return null in this field.",
          "type": "string"
        },
        "added_by": {
          "$ref": "b4d326d5-5457-48d6-a682-af595306343f"
        },
        "is_local": {
          "description": "Whether this track is a [local file](https://developer.spotify.com/web-api/local-files-spotify-playlists/) or not.",
          "type": "boolean"
        },
        "track": {
          "$ref": "7fcd38ef-9759-41d1-badc-e4f606a0275a"
        }
      },
      "type": "object"
    },
    {
      "id": "6e1bf70f-1537-4843-b186-810e96a11a63",
      "properties": {
        "href": {
          "description": "A link to the Web API endpoint returning the full result of the request.",
          "type": "string"
        },
        "items": {
          "description": "The requested data.",
          "items": {
            "$ref": "38b7b3e7-82c1-4cf3-9fb6-90a5938c39cf"
          },
          "type": "array"
        },
        "limit": {
          "description": "The maximum number of items in the response (as set in the query or by default).",
          "type": "integer"
        },
        "next": {
          "description": "URL to the next page of items. (null if none)",
          "type": "string"
        },
        "offset": {
          "description": "The offset of the items returned (as set in the query or by default).",
          "type": "integer"
        },
        "previous": {
          "description": "URL to the previous page of items. (null if none)",
          "type": "string"
        },
        "total": {
          "description": "The total number of items available to return.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    {
      "id": "b5d3cb16-7ff0-4ad9-9b90-83816c144629",
      "properties": {
        "href": {
          "description": "A link to the Web API endpoint returning the full result of the request.",
          "type": "string"
        },
        "items": {
          "description": "The requested data.",
          "items": {
            "$ref": "ccbd1b25-7bac-43a6-9128-c974e81d9d38"
          },
          "type": "array"
        },
        "limit": {
          "description": "The maximum number of items in the response (as set in the query or by default).",
          "type": "integer"
        },
        "next": {
          "description": "URL to the next page of items. (null if none)",
          "type": "string"
        },
        "offset": {
          "description": "The offset of the items returned (as set in the query or by default).",
          "type": "integer"
        },
        "previous": {
          "description": "URL to the previous page of items. (null if none)",
          "type": "string"
        },
        "total": {
          "description": "The total number of items available to return.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    {
      "id": "2f788b04-7d19-483e-96e1-3fdaa1f5cb01",
      "properties": {
        "artists": {
          "description": "The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist.",
          "items": {
            "$ref": "993f9d90-0ea3-4ef9-b6d0-0d9487d57bc0"
          },
          "type": "array"
        },
        "available_markets": {
          "description": "A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code. ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "disc_number": {
          "description": "The disc number (usually 1 unless the album consists of more than one disc).",
          "type": "integer"
        },
        "duration_ms": {
          "description": "The track length in milliseconds.",
          "type": "integer"
        },
        "explicit": {
          "description": "Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown).",
          "type": "boolean"
        },
        "external_urls": {
          "additionalProperties": {
            "description": "The type of the URL, for example: 'spotify' - The Spotify URL for the object.",
            "type": "string"
          },
          "description": "Known external URLs for this track.",
          "type": "object"
        },
        "href": {
          "description": "A link to the Web API endpoint providing full details of the track.",
          "type": "string"
        },
        "id": {
          "description": "The Spotify ID for the track.",
          "type": "string"
        },
        "is_playable": {
          "description": "Part of the response when Track Relinking is applied. If true, the track is playable in the given market. Otherwise false.",
          "type": "boolean"
        },
        "linked_from": {
          "description": "Part of the response when Track Relinking is applied, and the requested track has been replaced with different track. The track in the linked_from object contains information about the originally requested track.",
          "properties": {
            "external_urls": {
              "additionalProperties": {
                "description": "The type of the URL, for example: 'spotify' - The Spotify URL for the object.",
                "type": "string"
              },
              "description": "Known external URLs for this track.",
              "type": "object"
            },
            "href": {
              "description": "A link to the Web API endpoint providing full details of the track.",
              "type": "string"
            },
            "id": {
              "description": "The Spotify ID for the track.",
              "type": "string"
            },
            "type": {
              "description": "The object type: 'track'.",
              "type": "string"
            },
            "uri": {
              "description": "The Spotify URI for the track.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "name": {
          "description": "The name of the track.",
          "type": "string"
        },
        "preview_url": {
          "description": "A URL to a 30 second preview (MP3 format) of the track.",
          "type": "string"
        },
        "track_number": {
          "description": "The number of the track. If an album has several discs, the track number is the number on the specified disc.",
          "type": "integer"
        },
        "type": {
          "description": "The object type: 'track'.",
          "type": "string"
        },
        "uri": {
          "description": "The Spotify URI for the track.",
          "type": "string"
        }
      },
      "type": "object"
    },
    {
      "id": "4364b02d-016a-4654-b34e-d4a0d4b3ffd9",
      "properties": {
        "href": {
          "description": "A link to the Web API endpoint returning the full result of the request.",
          "type": "string"
        },
        "items": {
          "description": "The requested data.",
          "items": {
            "$ref": "7a5d3152-3eed-4677-b357-2be7e5713706"
          },
          "type": "array"
        },
        "limit": {
          "description": "The maximum number of items in the response (as set in the query or by default).",
          "type": "integer"
        },
        "next": {
          "description": "URL to the next page of items. (null if none)",
          "type": "string"
        },
        "offset": {
          "description": "The offset of the items returned (as set in the query or by default).",
          "type": "integer"
        },
        "previous": {
          "description": "URL to the previous page of items. (null if none)",
          "type": "string"
        },
        "total": {
          "description": "The total number of items available to return.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    {
      "id": "9681ddba-3089-499e-8eb1-30036c65b84e",
      "properties": {
        "href": {
          "description": "A link to the Web API endpoint returning the full result of the request.",
          "type": "string"
        },
        "items": {
          "description": "The requested data.",
          "items": {
            "$ref": "2f788b04-7d19-483e-96e1-3fdaa1f5cb01"
          },
          "type": "array"
        },
        "limit": {
          "description": "The maximum number of items in the response (as set in the query or by default).",
          "type": "integer"
        },
        "next": {
          "description": "URL to the next page of items. (null if none)",
          "type": "string"
        },
        "offset": {
          "description": "The offset of the items returned (as set in the query or by default).",
          "type": "integer"
        },
        "previous": {
          "description": "URL to the previous page of items. (null if none)",
          "type": "string"
        },
        "total": {
          "description": "The total number of items available to return.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    {
      "id": "e892c7c3-5288-4bec-8499-fb5f5a66d970",
      "properties": {
        "href": {
          "description": "A link to the Web API endpoint returning the full result of the request.",
          "type": "string"
        },
        "items": {
          "description": "The requested data.",
          "items": {
            "$ref": "114ba8f6-8c40-48f3-900c-be5b6c3893a7"
          },
          "type": "array"
        },
        "limit": {
          "description": "The maximum number of items in the response (as set in the query or by default).",
          "type": "integer"
        },
        "next": {
          "description": "URL to the next page of items. (null if none)",
          "type": "string"
        },
        "offset": {
          "description": "The offset of the items returned (as set in the query or by default).",
          "type": "integer"
        },
        "previous": {
          "description": "URL to the previous page of items. (null if none)",
          "type": "string"
        },
        "total": {
          "description": "The total number of items available to return.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    {
      "id": "0b90746f-5776-4fa0-b050-8aee9c02505a",
      "properties": {
        "height": {
          "description": "The image height in pixels. If unknown: null or not returned.",
          "type": "integer"
        },
        "url": {
          "description": "The source URL of the image.",
          "type": "string"
        },
        "width": {
          "description": "The image width in pixels. If unknown: null or not returned.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    {
      "id": "ccbd1b25-7bac-43a6-9128-c974e81d9d38",
      "properties": {
        "album_type": {
          "description": "The type of the album: one of 'album', 'single', or 'compilation'.",
          "type": "string"
        },
        "available_markets": {
          "description": "The markets in which the album is available: ISO 3166-1 alpha-2 country codes. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "external_urls": {
          "additionalProperties": {
            "description": "The type of the URL, for example: 'spotify' - The Spotify URL for the object.",
            "type": "string"
          },
          "description": "Known external URLs for this album.",
          "type": "object"
        },
        "href": {
          "description": "A link to the Web API endpoint providing full details of the album.",
          "type": "string"
        },
        "id": {
          "description": "The Spotify ID for the album.",
          "type": "string"
        },
        "images": {
          "description": "The cover art for the album in various sizes, widest first.",
          "items": {
            "$ref": "0b90746f-5776-4fa0-b050-8aee9c02505a"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the album.",
          "type": "string"
        },
        "type": {
          "description": "The object type: 'album'.",
          "type": "string"
        },
        "uri": {
          "description": "The Spotify URI for the album.",
          "type": "string"
        }
      },
      "type": "object"
    },
    {
      "id": "dd623aaf-7195-495c-9f22-eb3be5d92f1f",
      "properties": {
        "birthdate": {
          "description": "The user's date-of-birth. This field is only available when the current user has granted access to the user-read-birthdate scope.",
          "type": "string"
        },
        "country": {
          "description": "The country of the user, as set in the user's account profile. An ISO 3166-1 alpha-2 country code. This field is only available when the current user has granted access to the user-read-private scope.",
          "type": "string"
        },
        "displayName": {
          "description": "The name displayed on the user's profile.",
          "type": "string"
        },
        "email": {
          "description": "The user's email address, as entered by the user when creating their account. This email address is unverified; there is no proof that it actually belongs to the user. This field is only available when the current user has granted access to the user-read-email scope.",
          "type": "string"
        },
        "external_urls": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Known external URLs for this user.",
          "type": "object"
        },
        "followers": {
          "$ref": "a0bdd637-839d-4c27-8d52-79761627a934"
        },
        "href": {
          "description": "A link to the Web API endpoint for this user.",
          "type": "string"
        },
        "id": {
          "description": "The Spotify ID for this user.",
          "type": "string"
        },
        "product": {
          "description": "The user's Spotify subscription level: 'premium', 'free', etc. (The subscription level 'open' can be considered the same as 'free'.) This field is only available when the current user has granted access to the user-read-private scope.",
          "type": "string"
        },
        "type": {
          "description": "The object type: 'user'",
          "type": "string"
        },
        "uri": {
          "description": "The Spotify URI for the user.",
          "type": "string"
        }
      },
      "type": "object"
    },
    {
      "id": "bec2b851-2f84-45d2-9f61-4d18a7fbf850",
      "properties": {
        "collaborative": {
          "description": "True if the owner allows other users to modify the playlist.",
          "type": "boolean"
        },
        "description": {
          "description": "The playlist description. Only returned for modified, verified playlists, otherwise null.",
          "type": "string"
        },
        "external_urls": {
          "additionalProperties": {
            "description": "The type of the URL, for example: 'spotify' - The Spotify URL for the object.",
            "type": "string"
          },
          "description": "Known external URLs for this album.",
          "type": "object"
        },
        "followers": {
          "description": "Information about the followers of the playlist.",
          "properties": {
            "href": {
              "description": "A link to the Web API endpoint providing full details of the followers; null if not available.",
              "type": "string"
            },
            "total": {
              "description": "The total number of followers.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "href": {
          "description": "A link to the Web API endpoint providing full details of the playlist.",
          "type": "string"
        },
        "id": {
          "description": "The Spotify ID of the playlist.",
          "type": "string"
        },
        "images": {
          "description": "The cover art for the album in various sizes, widest first.",
          "items": {
            "$ref": "0b90746f-5776-4fa0-b050-8aee9c02505a"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the playlist.",
          "type": "string"
        },
        "owner": {
          "$ref": "b4d326d5-5457-48d6-a682-af595306343f"
        },
        "public": {
          "description": "The playlist's public/private status: true the playlist is public, false the playlist is private, null the playlist status is not relevant. For more about public/private status, see Working with Playlists.",
          "type": "boolean"
        },
        "snapshot_id": {
          "description": "The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version",
          "type": "string"
        },
        "tracks": {
          "$ref": "4364b02d-016a-4654-b34e-d4a0d4b3ffd9"
        },
        "type": {
          "description": "The object type: 'playlist'.",
          "type": "string"
        },
        "uri": {
          "description": "Spotify URI of the playlist.",
          "type": "string"
        }
      },
      "type": "object"
    },
    {
      "description": "Information about the followers of the artist.",
      "id": "a0bdd637-839d-4c27-8d52-79761627a934",
      "properties": {
        "href": {
          "description": "A link to the Web API endpoint providing full details of the followers; null if not available.",
          "type": "string"
        },
        "total": {
          "description": "The total number of followers.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    {
      "id": "6c8243e5-86ef-423a-ad93-8759aafad983",
      "properties": {
        "album_type": {
          "description": "The type of the album: one of 'album', 'single', or 'compilation'.",
          "type": "string"
        },
        "artists": {
          "description": "The artists of the album. Each artist object includes a link in href to more detailed information about the artist.",
          "items": {
            "$ref": "d3114a88-4bcf-4ff9-9ced-99aa8f41317b"
          },
          "type": "array"
        },
        "available_markets": {
          "description": "The markets in which the album is available: ISO 3166-1 alpha-2 country codes. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "copyrights": {
          "description": "The copyright statements of the album.",
          "items": {
            "properties": {
              "text": {
                "description": "The copyright text for this album.",
                "type": "string"
              },
              "type": {
                "description": "The type of copyright: C = the copyright, P = the sound recording (performance) copyright.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "external_ids": {
          "additionalProperties": {
            "description": "The identifier type, for example: 'isrc' - International Standard Recording Code, 'ean' - International Article Number, 'upc' - Universal Product Code",
            "type": "string"
          },
          "description": "Known external IDs for this album.",
          "type": "object"
        },
        "external_urls": {
          "additionalProperties": {
            "description": "The type of the URL, for example: 'spotify' - The Spotify URL for the object.",
            "type": "string"
          },
          "description": "Known external URLs for this album.",
          "type": "object"
        },
        "genres": {
          "description": "A list of the genres used to classify the album. For example: 'Prog Rock', 'Post-Grunge'. (If not yet classified, the array is empty.)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "href": {
          "description": "A link to the Web API endpoint providing full details of the album.",
          "type": "string"
        },
        "id": {
          "description": "The Spotify ID for the album.",
          "type": "string"
        },
        "images": {
          "description": "The cover art for the album in various sizes, widest first.",
          "items": {
            "$ref": "0b90746f-5776-4fa0-b050-8aee9c02505a"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the album.",
          "type": "string"
        },
        "popularity": {
          "description": "The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated from the popularity of the album's individual tracks.",
          "type": "integer"
        },
        "release_date": {
          "description": "The date the album was first released, for example '1981-12-15'. Depending on the precision, it might be shown as '1981' or '1981-12'.",
          "type": "string"
        },
        "release_date_precision": {
          "description": "The precision with which release_date value is known: 'year', 'month', or 'day'.",
          "type": "string"
        },
        "tracks": {
          "$ref": "9681ddba-3089-499e-8eb1-30036c65b84e"
        },
        "type": {
          "description": "The object type: 'album'.",
          "type": "string"
        },
        "uri": {
          "description": "The Spotify URI for the album.",
          "type": "string"
        }
      },
      "type": "object"
    },
    {
      "id": "048a126e-c9b8-4d24-a32d-dcaf716e6823",
      "properties": {
        "albums": {
          "description": "Present if the type of search includes 'album'.",
          "properties": {
            "href": {
              "description": "A link to the Web API endpoint returning the full result of the request.",
              "type": "string"
            },
            "items": {
              "description": "The requested data.",
              "items": {
                "$ref": "ccbd1b25-7bac-43a6-9128-c974e81d9d38"
              },
              "type": "array"
            },
            "limit": {
              "description": "The maximum number of items in the response (as set in the query or by default).",
              "type": "integer"
            },
            "next": {
              "description": "URL to the next page of items. (null if none)",
              "type": "string"
            },
            "offset": {
              "description": "The offset of the items returned (as set in the query or by default).",
              "type": "integer"
            },
            "previous": {
              "description": "URL to the previous page of items. (null if none)",
              "type": "string"
            },
            "total": {
              "description": "The total number of items available to return.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "artists": {
          "description": "Present if the type of search includes 'artist'.",
          "properties": {
            "href": {
              "description": "A link to the Web API endpoint returning the full result of the request.",
              "type": "string"
            },
            "items": {
              "description": "The requested data.",
              "items": {
                "$ref": "d3114a88-4bcf-4ff9-9ced-99aa8f41317b"
              },
              "type": "array"
            },
            "limit": {
              "description": "The maximum number of items in the response (as set in the query or by default).",
              "type": "integer"
            },
            "next": {
              "description": "URL to the next page of items. (null if none)",
              "type": "string"
            },
            "offset": {
              "description": "The offset of the items returned (as set in the query or by default).",
              "type": "integer"
            },
            "previous": {
              "description": "URL to the previous page of items. (null if none)",
              "type": "string"
            },
            "total": {
              "description": "The total number of items available to return.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "tracks": {
          "description": "Present if the type of search includes 'track'.",
          "properties": {
            "href": {
              "description": "A link to the Web API endpoint returning the full result of the request.",
              "type": "string"
            },
            "items": {
              "description": "The requested data.",
              "items": {
                "$ref": "7fcd38ef-9759-41d1-badc-e4f606a0275a"
              },
              "type": "array"
            },
            "limit": {
              "description": "The maximum number of items in the response (as set in the query or by default).",
              "type": "integer"
            },
            "next": {
              "description": "URL to the next page of items. (null if none)",
              "type": "string"
            },
            "offset": {
              "description": "The offset of the items returned (as set in the query or by default).",
              "type": "integer"
            },
            "previous": {
              "description": "URL to the previous page of items. (null if none)",
              "type": "string"
            },
            "total": {
              "description": "The total number of items available to return.",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    {
      "id": "b4d326d5-5457-48d6-a682-af595306343f",
      "properties": {
        "displayName": {
          "description": "The name displayed on the user's profile.",
          "type": "string"
        },
        "external_urls": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Known external URLs for this user.",
          "type": "object"
        },
        "followers": {
          "$ref": "a0bdd637-839d-4c27-8d52-79761627a934"
        },
        "href": {
          "description": "A link to the Web API endpoint for this user.",
          "type": "string"
        },
        "id": {
          "description": "The Spotify ID for this user.",
          "type": "string"
        },
        "type": {
          "description": "The object type: 'user'",
          "type": "string"
        },
        "uri": {
          "description": "The Spotify URI for the user.",
          "type": "string"
        }
      },
      "type": "object"
    },
    {
      "id": "bdb9fc44-c171-42ac-9a74-196905d35851",
      "properties": {
        "href": {
          "description": "A link to the Web API endpoint returning the full result of the request.",
          "type": "string"
        },
        "items": {
          "description": "The requested data.",
          "items": {
            "$ref": "b730129e-1c04-4c47-9248-29d1bf178b9b"
          },
          "type": "array"
        },
        "limit": {
          "description": "The maximum number of items in the response (as set in the query or by default).",
          "type": "integer"
        },
        "next": {
          "description": "URL to the next page of items. (null if none)",
          "type": "string"
        },
        "offset": {
          "description": "The offset of the items returned (as set in the query or by default).",
          "type": "integer"
        },
        "previous": {
          "description": "URL to the previous page of items. (null if none)",
          "type": "string"
        },
        "total": {
          "description": "The total number of items available to return.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    {
      "id": "3e47b7c6-e6a9-475a-94ed-d3efbf2c0b36",
      "properties": {
        "href": {
          "description": "A link to the Web API endpoint returning the full result of the request.",
          "type": "string"
        },
        "items": {
          "description": "The requested data.",
          "items": {
            "$ref": "2f788b04-7d19-483e-96e1-3fdaa1f5cb01"
          },
          "type": "array"
        },
        "limit": {
          "description": "The maximum number of items in the response (as set in the query or by default).",
          "type": "integer"
        },
        "next": {
          "description": "URL to the next page of items. (null if none)",
          "type": "string"
        },
        "offset": {
          "description": "The offset of the items returned (as set in the query or by default).",
          "type": "integer"
        },
        "previous": {
          "description": "URL to the previous page of items. (null if none)",
          "type": "string"
        },
        "total": {
          "description": "The total number of items available to return.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    {
      "id": "114ba8f6-8c40-48f3-900c-be5b6c3893a7",
      "properties": {
        "href": {
          "description": "A link to the Web API endpoint returning full details of the category.",
          "type": "string"
        },
        "icons": {
          "items": {
            "$ref": "0b90746f-5776-4fa0-b050-8aee9c02505a"
          },
          "type": "array"
        },
        "id": {
          "description": "The Spotify category ID of the category.",
          "type": "string"
        },
        "name": {
          "description": "The name of the category.",
          "type": "string"
        }
      },
      "type": "object"
    },
    {
      "id": "7fcd38ef-9759-41d1-badc-e4f606a0275a",
      "properties": {
        "album": {
          "$ref": "ccbd1b25-7bac-43a6-9128-c974e81d9d38"
        },
        "artists": {
          "description": "The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist.",
          "items": {
            "$ref": "993f9d90-0ea3-4ef9-b6d0-0d9487d57bc0"
          },
          "type": "array"
        },
        "available_markets": {
          "description": "A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code. ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "disc_number": {
          "description": "The disc number (usually 1 unless the album consists of more than one disc).",
          "type": "integer"
        },
        "duration_ms": {
          "description": "The track length in milliseconds.",
          "type": "integer"
        },
        "explicit": {
          "description": "Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown).",
          "type": "boolean"
        },
        "external_ids": {
          "additionalProperties": {
            "description": "The identifier type, for example: 'isrc' - International Standard Recording Code, 'ean' - International Article Number, 'upc' - Universal Product Code",
            "type": "string"
          },
          "description": "Known external IDs for the track.",
          "type": "object"
        },
        "external_urls": {
          "additionalProperties": {
            "description": "The type of the URL, for example: 'spotify' - The Spotify URL for the object.",
            "type": "string"
          },
          "description": "Known external URLs for this track.",
          "type": "object"
        },
        "href": {
          "description": "A link to the Web API endpoint providing full details of the track.",
          "type": "string"
        },
        "id": {
          "description": "The Spotify ID for the track.",
          "type": "string"
        },
        "is_playable": {
          "description": "Part of the response when Track Relinking is applied. If true, the track is playable in the given market. Otherwise false.",
          "type": "boolean"
        },
        "linked_from": {
          "description": "Part of the response when Track Relinking is applied, and the requested track has been replaced with different track. The track in the linked_from object contains information about the originally requested track.",
          "properties": {
            "external_urls": {
              "additionalProperties": {
                "description": "The type of the URL, for example: 'spotify' - The Spotify URL for the object.",
                "type": "string"
              },
              "description": "Known external URLs for this track.",
              "type": "object"
            },
            "href": {
              "description": "A link to the Web API endpoint providing full details of the track.",
              "type": "string"
            },
            "id": {
              "description": "The Spotify ID for the track.",
              "type": "string"
            },
            "type": {
              "description": "The object type: 'track'.",
              "type": "string"
            },
            "uri": {
              "description": "The Spotify URI for the track.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "name": {
          "description": "The name of the track.",
          "type": "string"
        },
        "preview_url": {
          "description": "A URL to a 30 second preview (MP3 format) of the track.",
          "type": "string"
        },
        "track_number": {
          "description": "The number of the track. If an album has several discs, the track number is the number on the specified disc.",
          "type": "integer"
        },
        "type": {
          "description": "The object type: 'track'.",
          "type": "string"
        },
        "uri": {
          "description": "The Spotify URI for the track.",
          "type": "string"
        }
      },
      "type": "object"
    },
    {
      "id": "209f6036-dafa-42bf-a080-d5ad9d85cb0c",
      "properties": {
        "snapshot_id": {
          "description": "The version identifier for the modified playlist. Can be supplied in other requests to target a specific playlist version.",
          "type": "string"
        }
      },
      "type": "object"
    },
    {
      "id": "d3114a88-4bcf-4ff9-9ced-99aa8f41317b",
      "properties": {
        "external_urls": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Known external URLs for this artist.",
          "type": "object"
        },
        "followers": {
          "$ref": "a0bdd637-839d-4c27-8d52-79761627a934"
        },
        "genres": {
          "description": "A list of the genres the artist is associated with. For example: 'Prog Rock', 'Post-Grunge'. (If not yet classified, the array is empty.)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "href": {
          "description": "A link to the Web API endpoint providing full details of the artist.",
          "type": "string"
        },
        "id": {
          "description": "The Spotify ID for the artist.",
          "type": "string"
        },
        "images": {
          "description": "Images of the artist in various sizes, widest first.",
          "items": {
            "$ref": "0b90746f-5776-4fa0-b050-8aee9c02505a"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the artist.",
          "type": "string"
        },
        "popularity": {
          "description": "The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks.",
          "type": "integer"
        },
        "type": {
          "description": "The object type: 'artist'",
          "type": "string"
        },
        "uri": {
          "description": "The Spotify URI for the artist.",
          "type": "string"
        }
      },
      "type": "object"
    }
  ],
  "SchemaHttpSecurityScheme": [
    {
      "authorizationUrl": "https://accounts.spotify.com/authorize",
      "description": "Spotify supports OAuth 2.0 for authenticating all API requests.\n",
      "flow": "implicit",
      "id": "71ce2326-d4eb-4c42-a56d-a2930824b35f",
      "scopes": {
        "playlist-modify-private": "",
        "playlist-modify-public": "",
        "playlist-read-collaborative": "",
        "playlist-read-private": "",
        "user-follow-modify": "",
        "user-follow-read": "",
        "user-library-modify": "",
        "user-library-read": "",
        "user-read-birthdate": "",
        "user-read-email": "",
        "user-read-private": ""
      },
      "type": "oauth2"
    },
    {
      "flows": {
        "authorizationCode": {
          "authorizationUrl": "https://accounts.spotify.com/authorize",
          "scopes": {
            "playlist-modify-private": "",
            "playlist-modify-public": "",
            "playlist-read-collaborative": "",
            "playlist-read-private": "",
            "user-follow-modify": "",
            "user-follow-read": "",
            "user-library-modify": "",
            "user-library-read": "",
            "user-read-birthdate": "",
            "user-read-email": "",
            "user-read-private": ""
          },
          "tokenUrl": "https://accounts.spotify.com/api/token"
        }
      },
      "id": "974f9915-cc7f-4110-b347-35efdb058c71",
      "type": "oauth2"
    }
  ],
  "Test": [
    {
      "id": "2830a289-52ef-4bd2-bc27-d273376e8a9d",
      "value": {
        "input": "{\"lat\":\"76.672138\",\"long\":\"87.123697\"}",
        "name": "default-test-input"
      }
    },
    {
      "id": "e10f572e-4cb0-44e2-b21b-5426bb974d48",
      "value": {
        "body": "{\"bus_id\":\"1\",\"lat\":\"10.1010\",\"long\":\"20.2020\",\"situation\":\"waiting 1\",\"time\":\"2021-66-77 12:00:12\",\"last_visited_station\":\"1\"}",
        "header": {},
        "path": {},
        "query": {}
      }
    },
    {
      "id": "d757ecdb-e74a-4ec0-972b-516b2f4c231a",
      "value": {
        "body": "{\"station_name\":\"new station 123\",\"lat\":\"127836\",\"long\":\"89127\"}",
        "header": {},
        "path": {},
        "query": {}
      }
    },
    {
      "id": "f911cce2-e08e-4a9c-a583-f095526b2ae2",
      "value": {
        "body": "",
        "header": {},
        "path": {},
        "query": {}
      }
    },
    {
      "id": "2e41a1d1-e5cf-4e92-9c47-ea2ede0818ad",
      "value": {
        "body": "{\"bus_name\":\"new bus 25\"}",
        "header": {},
        "path": {},
        "query": {}
      }
    },
    {
      "id": "1a66e87f-e182-4d0b-946c-bc2c02351c20",
      "value": {
        "body": "",
        "header": {},
        "path": {},
        "query": {}
      }
    },
    {
      "id": "e3d18562-9f8e-4e74-89fb-ed74e18a599f",
      "value": {
        "input": {
          "data": "{\"bus_id\":\"1\",\"lat\":\"10.1010\",\"long\":\"20.2020\",\"situation\":\"waiting 1\",\"time\":\"2021-66-77 12:00:12\",\"last_visited_station\":\"1\"}",
          "what": "bus_position"
        },
        "name": "default-test-input"
      }
    },
    {
      "id": "930c841f-02dd-48de-ab5b-1c188bbfe4fa",
      "value": {
        "body": "{\"update\":\"off\",\"check\":\"off\",\"clean\":\"off\"}",
        "header": {},
        "path": {},
        "query": {}
      }
    },
    {
      "id": "d11874de-0843-4f27-9c9b-7e00e6aa03dd",
      "value": {
        "body": "",
        "header": {},
        "path": {},
        "query": {}
      }
    },
    {
      "id": "11531c17-809a-43f8-b9fe-21a166bae674",
      "value": {
        "body": "{\"bus_id\":\"1\",\"station_id\":\"[1,8,10,12,14]\"}",
        "header": {},
        "path": {},
        "query": {}
      }
    },
    {
      "id": "e2dbe48a-7479-4dbe-8dc2-34e5dc6f4dd8",
      "value": {
        "body": "{\"bus_id\":\"1\"}",
        "header": {},
        "path": {},
        "query": {}
      }
    }
  ],
  "Timer": [
    {
      "error-cutoff": 0,
      "id": "f1490449-adb2-4a23-a3d0-597be4159173",
      "interval": 6000,
      "start-on-bootup": true
    },
    {
      "error-cutoff": 0,
      "id": "be0d9484-5f61-40f4-befb-8563c15bd9fd",
      "interval": 86400000,
      "start-on-bootup": false
    },
    {
      "error-cutoff": 0,
      "id": "ede59e76-7cf7-4e00-9a77-f537ce3f44ed",
      "interval": 600000,
      "start-on-bootup": false
    }
  ]
}
